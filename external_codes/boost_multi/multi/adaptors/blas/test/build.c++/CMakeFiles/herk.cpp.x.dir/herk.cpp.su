lazy_ostream.hpp:33:29:boost::unit_test::lazy_ostream::~lazy_ostream()	16	static
lazy_ostream.hpp:33:29:virtual boost::unit_test::lazy_ostream::~lazy_ostream()	32	static
lazy_ostream.hpp:35:29:static boost::unit_test::lazy_ostream& boost::unit_test::lazy_ostream::instance()	16	static
lazy_ostream.hpp:43:29:virtual std::ostream& boost::unit_test::lazy_ostream::operator()(std::ostream&) const	16	static
lazy_ostream.hpp:45:29:boost::unit_test::lazy_ostream::lazy_ostream(bool)	16	static
char_traits.h:329:7:static constexpr std::size_t std::char_traits<char>::length(const char_type*)	48	static
typeinfo:120:10:bool std::type_info::operator==(const std::type_info&) const	32	static
new:173:33:void* operator new(std::size_t, void*)	16	static
limits:1204:7:static constexpr long int std::numeric_limits<long int>::min()	16	static
limits:1207:7:static constexpr long int std::numeric_limits<long int>::max()	16	static
basic_string.h:6546:3:std::string std::__cxx11::to_string(int)	48	static
basic_string.h:6557:3:std::string std::__cxx11::to_string(long int)	48	static
sp_counted_base_std_atomic.hpp:35:27:int_least32_t boost::detail::atomic_decrement(std::atomic_int_least32_t*)	16	static
sp_counted_base_std_atomic.hpp:108:10:void boost::detail::sp_counted_base::release()	32	static
sp_counted_base_std_atomic.hpp:122:10:void boost::detail::sp_counted_base::weak_release()	32	static
type_traits:62:17:constexpr std::integral_constant<_Tp, __v>::operator std::integral_constant<_Tp, __v>::value_type() const [with _Tp = bool; _Tp __v = true]	16	static
shared_count.hpp:122:21:constexpr boost::detail::shared_count::shared_count()	16	static
shared_count.hpp:425:5:boost::detail::shared_count::~shared_count()	32	static
shared_ptr.hpp:341:25:boost::shared_ptr<boost::basic_wrap_stringstream<char> >::~shared_ptr()	32	static
assertion_result.hpp:52:5:boost::test_tools::assertion_result::assertion_result(bool)	32	static
assertion_result.hpp:65:5:boost::test_tools::assertion_result::readonly_property65::readonly_property65(write_param_t)	32	static
wrap_stringstream.hpp:40:7:boost::basic_wrap_stringstream<char>::basic_wrap_stringstream()	32	static
fwd.hpp:45:13:bool boost::test_tools::tt_detail::dummy_cond()	16	static
assertion_result.hpp:39:23:boost::test_tools::assertion_result::~assertion_result()	32	static
stl_type_index.hpp:93:12:boost::typeindex::stl_type_index::stl_type_index(const type_info_t&)	16	static
stl_type_index.hpp:117:43:const type_info_t& boost::typeindex::stl_type_index::type_info() const	16	static
stl_type_index.hpp:206:13:bool boost::typeindex::stl_type_index::equal(const boost::typeindex::stl_type_index&) const	32	static
function_base.hpp:603:3:boost::function_base::function_base()	16	static
function_base.hpp:689:8:bool boost::function_base::has_trivial_copy_and_destroy() const	16	static
function_template.hpp:1048:7:boost::function<void()>::~function()	32	static
test_unit.hpp:265:1:boost::unit_test::test_case* boost::unit_test::make_test_case(const boost::function<void()>&, boost::unit_test::const_string, boost::unit_test::const_string, std::size_t)	176	static
unit_test_suite.hpp:386:6:bool init_unit_test()	16	static
unit_test.hpp:61:1:int main(int, char**)	32	static
complex:1232:26:constexpr std::complex<double>::complex(double, double)	16	static
complex:1252:7:constexpr double std::complex<double>::real() const	16	static
complex:1256:7:constexpr double std::complex<double>::imag() const	16	static
complex:1287:7:std::complex<double>& std::complex<double>::operator+=(double)	16	static
complex:1301:7:std::complex<double>& std::complex<double>::operator*=(double)	16	static
core.hpp:265:1:boost::multi::blas::{anonymous}::v boost::multi::blas::rotg(const s&, const s&, boost::multi::blas::{anonymous}::s&, boost::multi::blas::{anonymous}::s&)	48	static
core.hpp:265:16:boost::multi::blas::{anonymous}::v boost::multi::blas::rotg(const d&, const d&, boost::multi::blas::{anonymous}::d&, boost::multi::blas::{anonymous}::d&)	48	static
core.hpp:266:1:boost::multi::blas::{anonymous}::v boost::multi::blas::rotmg(boost::multi::blas::{anonymous}::s&, boost::multi::blas::{anonymous}::s&, boost::multi::blas::{anonymous}::s&, const s&, boost::multi::blas::{anonymous}::s (&)[5])	64	static
core.hpp:266:16:boost::multi::blas::{anonymous}::v boost::multi::blas::rotmg(boost::multi::blas::{anonymous}::d&, boost::multi::blas::{anonymous}::d&, boost::multi::blas::{anonymous}::d&, const d&, boost::multi::blas::{anonymous}::d (&)[5])	64	static
core.hpp:273:1:boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::s*, int64_t)::<lambda(auto:31)> [with auto:31 = long int]	32	static
core.hpp:273:1:boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::s*, int64_t)::<lambda(auto:32)> [with auto:32 = long int]	32	static
core.hpp:273:1:boost::multi::blas::{anonymous}::s* boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::s*, int64_t)	80	static
core.hpp:273:16:boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::d*, int64_t)::<lambda(auto:33)> [with auto:33 = long int]	32	static
core.hpp:273:16:boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::d*, int64_t)::<lambda(auto:34)> [with auto:34 = long int]	32	static
core.hpp:273:16:boost::multi::blas::{anonymous}::d* boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::d*, int64_t)	80	static
core.hpp:273:31:boost::multi::blas::core::scal(int64_t, const c*, boost::multi::blas::{anonymous}::c*, int64_t)::<lambda(auto:35)> [with auto:35 = long int]	32	static
core.hpp:273:31:boost::multi::blas::core::scal(int64_t, const c*, boost::multi::blas::{anonymous}::c*, int64_t)::<lambda(auto:36)> [with auto:36 = long int]	32	static
core.hpp:273:31:boost::multi::blas::{anonymous}::c* boost::multi::blas::core::scal(int64_t, const c*, boost::multi::blas::{anonymous}::c*, int64_t)	80	static
core.hpp:273:46:boost::multi::blas::core::scal(int64_t, const z*, boost::multi::blas::{anonymous}::z*, int64_t)::<lambda(auto:37)> [with auto:37 = long int]	32	static
core.hpp:273:46:boost::multi::blas::core::scal(int64_t, const z*, boost::multi::blas::{anonymous}::z*, int64_t)::<lambda(auto:38)> [with auto:38 = long int]	32	static
core.hpp:273:46:boost::multi::blas::{anonymous}::z* boost::multi::blas::core::scal(int64_t, const z*, boost::multi::blas::{anonymous}::z*, int64_t)	80	static
core.hpp:273:61:boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::z*, int64_t)::<lambda(auto:39)> [with auto:39 = long int]	32	static
core.hpp:273:61:boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::z*, int64_t)::<lambda(auto:40)> [with auto:40 = long int]	32	static
core.hpp:273:61:boost::multi::blas::{anonymous}::z* boost::multi::blas::core::scal(int64_t, const d*, boost::multi::blas::{anonymous}::z*, int64_t)	80	static
core.hpp:273:77:boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::c*, int64_t)::<lambda(auto:41)> [with auto:41 = long int]	32	static
core.hpp:273:77:boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::c*, int64_t)::<lambda(auto:42)> [with auto:42 = long int]	32	static
core.hpp:273:77:boost::multi::blas::{anonymous}::c* boost::multi::blas::core::scal(int64_t, const s*, boost::multi::blas::{anonymous}::c*, int64_t)	80	static
index_range.hpp:96:12:constexpr boost::multi::range<IndexType, IndexTypeLast>::range(IndexType, IndexTypeLast) [with IndexType = long int; IndexTypeLast = long int]	16	static
layout.hpp:117:25:constexpr const base_& boost::multi::extensions_t<1>::base() const	16	static
layout.hpp:118:12:constexpr boost::multi::extensions_t<1>::extensions_t(const std::tuple<boost::multi::extension_t<long int, long int> >&)	16	static
layout.hpp:298:56:constexpr boost::multi::layout_t<1>::extensions_type boost::multi::operator*(const index_extension&, const extensions_type&)	80	static
layout.hpp:466:56:constexpr boost::multi::layout_t<2>::extensions_type boost::multi::operator*(const index_extension&, const extensions_type&)	48	static
filling.hpp:25:9:boost::multi::blas::filling boost::multi::blas::flip(boost::multi::blas::filling)	16	static
filling.hpp:32:9:boost::multi::blas::filling boost::multi::blas::operator-(boost::multi::blas::filling)	24	static
filling.hpp:33:9:boost::multi::blas::filling boost::multi::blas::operator+(boost::multi::blas::filling)	16	static
side.hpp:26:6:boost::multi::blas::side boost::multi::blas::swap(boost::multi::blas::side)	16	static
wrap_stringstream.hpp:40:7:boost::basic_wrap_stringstream<char>::~basic_wrap_stringstream()	32	static
herk.cpp:23:1:void multi_blas_herk_invoker()	496	static
initializer_list:75:7:constexpr const _E* std::initializer_list<_E>::begin() const [with _E = boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >]	16	static
initializer_list:75:7:constexpr const _E* std::initializer_list<_E>::begin() const [with _E = std::complex<double>]	16	static
array.hpp:743:17:constexpr boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >::array(std::initializer_list<std::complex<double> >) [inherited from boost::multi::static_array<std::complex<double>, 1, std::allocator<std::complex<double> > >]	48	static
array.hpp:929:2:boost::multi::array<T, D, A>::~array() [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	32	static
array.hpp:743:17:constexpr boost::multi::array<std::complex<double>, 2>::array(std::initializer_list<boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > > >) [inherited from boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >]	48	static
array.hpp:929:2:boost::multi::array<T, D, A>::~array() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
layout.hpp:132:15:constexpr boost::multi::extensions_t<2>::extensions_t(_U1&&, _U2&&) [with _U1 = int; _U2 = int; typename std::enable_if<((_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)), bool>::type <anonymous> = true][inherited from std::tuple<boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int> >]	48	static
array.hpp:743:17:boost::multi::array<std::complex<double>, 2>::array(boost::multi::layout_t<2>::extensions_type, const element&) [inherited from boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >]	48	static
layout.hpp:132:15:constexpr boost::multi::extensions_t<2>::extensions_t(_U1&&, _U2&&) [with _U1 = long int; _U2 = long int; typename std::enable_if<((_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)), bool>::type <anonymous> = true][inherited from std::tuple<boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int> >]	48	static
array.hpp:743:17:boost::multi::array<std::complex<double>, 2>::array(boost::multi::layout_t<2>::extensions_type, const allocator_type&) [inherited from boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >]	48	static
herk.hpp:113:6:auto boost::multi::blas::herk(AA, const A2D&) [with AA = double; A2D = boost::multi::array<std::complex<double>, 2>; Ret = boost::multi::array<std::complex<double>, 2>]	192	static
numeric.hpp:260:16:decltype(auto) boost::multi::blas::conj(A&&) [with A = const boost::multi::array<std::complex<double>, 2>&; D = boost::multi::array<std::complex<double>, 2>; Elem = std::complex<double>; Ptr = std::complex<double>*; typename std::enable_if<((! boost::multi::blas::is_conjugated<A>{}) && boost::multi::blas::is_complex_array<A>{}), int>::type <anonymous> = 0]	48	static
operations.hpp:38:16:decltype(auto) boost::multi::blas::transposed(A&&) [with A = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >]	48	static
operations.hpp:18:16:decltype(auto) boost::multi::blas::conjugated_transposed(A&&) [with A = const boost::multi::array<std::complex<double>, 2>&; D = boost::multi::array<std::complex<double>, 2>; E = std::complex<double>]	112	static
operations.hpp:35:16:decltype(auto) boost::multi::blas::hermitized(A&&) [with A = const boost::multi::array<std::complex<double>, 2>&]	48	static
operations.hpp:47:17:decltype(auto) boost::multi::blas::operators::<unnamed struct>::operator()(A&&) const [with A = const boost::multi::array<std::complex<double>, 2>&; typename std::enable_if<(typename std::decay<_Tp>::type::dimensionality == 2), int>::type <anonymous> = 0]	64	static
gemm.hpp:325:6:auto boost::multi::blas::gemm(Scalar, const A2D&, const B2D&) [with Scalar = double; A2D = boost::multi::array<std::complex<double>, 2>; B2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >]	80	static
herk.hpp:140:26:auto boost::multi::blas::herk(const A2D&) [with A2D = boost::multi::array<std::complex<double>, 2>]	48	static
herk.hpp:113:6:auto boost::multi::blas::herk(AA, const A2D&) [with AA = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; Ret = boost::multi::array<std::complex<double>, 2>]	192	static
herk.cpp:23:1:void multi_blas_herk::test_method()	976	dynamic,bounded
char_traits.h:100:7:static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char]	16	static
char_traits.h:161:5:static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char]	64	static
string_conversions.h:99:5:) [with _String = std::__cxx11::basic_string<char>; _CharT = char]	304	dynamic
basic_string.h:150:14:std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider()	32	static
basic_string.h:6097:5:std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	80	static
basic_string.h:6109:5:std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	48	static
basic_cstring.hpp:197:1:boost::unit_test::basic_cstring<CharT>::basic_cstring(const boost::unit_test::basic_cstring<CharT>&) [with CharT = const char]	16	static
basic_cstring.hpp:187:1:boost::unit_test::basic_cstring<CharT>::basic_cstring() [with CharT = const char]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = int]	16	static
shared_ptr.hpp:352:21:constexpr boost::shared_ptr<T>::shared_ptr() [with T = boost::basic_wrap_stringstream<char>]	32	static
class_properties.hpp:131:21:boost::unit_test::readonly_property<PropertyType>::readonly_property(boost::unit_test::readonly_property<PropertyType>::write_param_t) [with PropertyType = bool]	32	static
wrap_stringstream.hpp:92:1:const std::__cxx11::basic_string<_CharT>& boost::basic_wrap_stringstream<CharT>::str() [with CharT = char]	80	static
basic_cstring.hpp:207:1:boost::unit_test::basic_cstring<CharT>::basic_cstring(const std_string&) [with CharT = const char]	48	static
basic_string.h:525:7:std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, const _Alloc&) [with <template-parameter-2-1> = std::allocator<char>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	64	static
function_template.hpp:756:5:boost::function0<R>::~function0() [with R = void]	32	static
basic_cstring.hpp:479:1:boost::unit_test::basic_cstring<CharT>::value_type* boost::unit_test::basic_cstring<CharT>::begin() [with CharT = const char]	16	static
basic_cstring.hpp:258:1:boost::unit_test::basic_cstring<CharT>::size_type boost::unit_test::basic_cstring<CharT>::size() const [with CharT = const char]	16	static
basic_cstring.hpp:79:5:boost::unit_test::basic_cstring<CharT>::basic_cstring(boost::unit_test::basic_cstring<CharT>::pointer, LenType) [with LenType = long unsigned int; CharT = const char]	16	static
basic_cstring.hpp:217:1:boost::unit_test::basic_cstring<CharT>::basic_cstring(boost::unit_test::basic_cstring<CharT>::pointer) [with CharT = const char]	48	static
basic_cstring.hpp:393:1:boost::unit_test::basic_cstring<CharT>::self_type& boost::unit_test::basic_cstring<CharT>::trim(boost::unit_test::basic_cstring<CharT>) [with CharT = const char]	64	static
tuple:588:19: (_Elements) >= 1)), bool>::type <anonymous> = true; _Elements = {boost::multi::extension_t<long int, long int>}]	32	static
tuple:1326:5:>&) [with long unsigned int __i = 0; _Elements = {boost::multi::extension_t<long int, long int>}]	32	static
index_range.hpp:143:22:constexpr boost::multi::range<IndexType, IndexTypeLast>::size_type boost::multi::range<IndexType, IndexTypeLast>::size() const [with IndexType = long int; IndexTypeLast = long int]	16	static
tuple:1470:5:) [with _Elements = {const boost::multi::extension_t<long int, long int>&}]	32	static
layout.hpp:164:12:I = {0, 1}; <template-parameter-2-3> = std::tuple<boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int> >; long int D = 2]	48	static
layout.hpp:137:12:constexpr boost::multi::extensions_t<D>::extensions_t(const Array&) [with Array = std::tuple<boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int> >; <template-parameter-2-2> = boost::multi::extension_t<long int>&&; long int D = 2]	32	static
tuple:1597:5:) [with _Tpls = {std::tuple<boost::multi::extension_t<long int, long int> >, const std::tuple<boost::multi::extension_t<long int, long int> >&}; <template-parameter-1-2> = void]	80	static
layout.hpp:138:12:constexpr boost::multi::extensions_t<D>::extensions_t(const index_extension&, const typename boost::multi::layout_t<(D - 1)>::extensions_type&) [with long int D = 2]	128	static
wrap_stringstream.hpp:83:1:boost::basic_wrap_stringstream<CharT>& boost::basic_wrap_stringstream<CharT>::ref() [with CharT = char]	16	static
wrap_stringstream.hpp:64:1:boost::basic_wrap_stringstream<CharT>& boost::operator<<(boost::basic_wrap_stringstream<CharT>&, const T&) [with CharT = char; T = char]	32	static
wrap_stringstream.hpp:64:1:boost::basic_wrap_stringstream<CharT>& boost::operator<<(boost::basic_wrap_stringstream<CharT>&, const T&) [with CharT = char; T = char [16]]	32	static
wrap_stringstream.hpp:64:1:boost::basic_wrap_stringstream<CharT>& boost::operator<<(boost::basic_wrap_stringstream<CharT>&, const T&) [with CharT = char; T = char [15]]	32	static
fixture.hpp:112:6:void boost::unit_test::setup_conditional(U&) [with U = multi_blas_herk]	48	static
wrap_stringstream.hpp:64:1:boost::basic_wrap_stringstream<CharT>& boost::operator<<(boost::basic_wrap_stringstream<CharT>&, const T&) [with CharT = char; T = char [13]]	32	static
wrap_stringstream.hpp:64:1:boost::basic_wrap_stringstream<CharT>& boost::operator<<(boost::basic_wrap_stringstream<CharT>&, const T&) [with CharT = char; T = char [19]]	32	static
fixture.hpp:118:6:void boost::unit_test::teardown_conditional(U&) [with U = multi_blas_herk]	48	static
function_template.hpp:1061:3:boost::function<R()>::function(Functor, typename boost::enable_if_<(! boost::is_integral<Functor>::value), int>::type) [with Functor = void (*)(); R = void]	48	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>]	16	static
complex:409:5:std::complex<_Tp> std::operator*(const _Tp&, const std::complex<_Tp>&) [with _Tp = double]	64	static
complex:349:5:std::complex<_Tp> std::operator+(const _Tp&, const std::complex<_Tp>&) [with _Tp = double]	64	static
complex:379:5:std::complex<_Tp> std::operator-(const _Tp&, const std::complex<_Tp>&) [with _Tp = double]	64	static
array.hpp:247:12:constexpr boost::multi::static_array<T, D, Alloc>::static_array(std::initializer_list<typename std::conditional<(boost::multi::static_array<T, D, Alloc>::dimensionality > 1), boost::multi::array<typename boost::multi::static_array<T, D, Alloc>::element, (boost::multi::static_array<T, D, Alloc>::dimensionality - 1), typename boost::multi::static_array<T, D, Alloc>::allocator_type>, typename std::conditional<(boost::multi::static_array<T, D, Alloc>::dimensionality == 1), typename boost::multi::static_array<T, D, Alloc>::element, typename boost::multi::static_array<T, D, Alloc>::element>::type>::type>) [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	80	static
array.hpp:25:34:boost::multi::array_allocator<std::allocator<std::complex<double> > >::~array_allocator()	32	static
array.hpp:278:2:boost::multi::static_array<T, D, Alloc>::~static_array() [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	32	static
array.hpp:247:12:constexpr boost::multi::static_array<T, D, Alloc>::static_array(std::initializer_list<typename std::conditional<(boost::multi::static_array<T, D, Alloc>::dimensionality > 1), boost::multi::array<typename boost::multi::static_array<T, D, Alloc>::element, (boost::multi::static_array<T, D, Alloc>::dimensionality - 1), typename boost::multi::static_array<T, D, Alloc>::allocator_type>, typename std::conditional<(boost::multi::static_array<T, D, Alloc>::dimensionality == 1), typename boost::multi::static_array<T, D, Alloc>::element, typename boost::multi::static_array<T, D, Alloc>::element>::type>::type>) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	80	static
array.hpp:278:2:boost::multi::static_array<T, D, Alloc>::~static_array() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
tuple:968:19:constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&) [with _U1 = int; _U2 = int; typename std::enable_if<((std::_TC<true, _T1, _T2>::_MoveConstructibleTuple<_U1, _U2>() && std::_TC<true, _T1, _T2>::_ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_SrcTuple>::type>::type, std::allocator_arg_t>::value)), bool>::type <anonymous> = true; _T1 = boost::multi::extension_t<long int>; _T2 = boost::multi::extension_t<long int>]	64	static
layout.hpp:373:22:constexpr boost::multi::layout_t<D, SSize>::size_type boost::multi::layout_t<D, SSize>::size() const [with long int D = 2; SSize = long int]	32	static
layout.hpp:366:22:constexpr boost::multi::layout_t<D, SSize>::size_type boost::multi::layout_t<D, SSize>::num_elements() const [with long int D = 2; SSize = long int]	48	static
types.hpp:83:16:Ns = {0}]	48	static
types.hpp:87:16:constexpr auto boost::multi::detail::tail(const Tuple&) [with Tuple = boost::multi::extensions_t<2>]	48	static
layout.hpp:252:17:constexpr auto boost::multi::layout_t<1, SSize>::stride(boost::multi::dimensionality_type) const [with SSize = long int]	32	static
layout.hpp:240:22:constexpr boost::multi::layout_t<1, SSize>::size_type boost::multi::layout_t<1, SSize>::size() const [with SSize = long int]	16	static
index_range.hpp:130:28:constexpr boost::multi::range<IndexType, IndexTypeLast>::const_reference boost::multi::range<IndexType, IndexTypeLast>::first() const [with IndexType = long int; IndexTypeLast = long int]	16	static
tuple:1326:5:>&) [with long unsigned int __i = 0; _Elements = {boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int>}]	32	static
tuple:1314:5:>&) [with long unsigned int __i = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	32	static
tuple:198:7:>&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	32	static
tuple:163:7:static constexpr const _Head& std::_Head_base<_Idx, _Head, false>::_M_head(const std::_Head_base<_Idx, _Head, false>&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	16	static
layout.hpp:223:12:constexpr boost::multi::layout_t<1, SSize>::layout_t(boost::multi::layout_t<1, SSize>::index_extension, const boost::multi::layout_t<0>&) [with SSize = long int]	48	static
tuple:1320:5:>&) [with long unsigned int __i = 0; _Elements = {boost::multi::extension_t<long int, long int>}]	32	static
layout.hpp:192:12:constexpr boost::multi::layout_t<0, SSize>::layout_t(const extensions_type&) [with SSize = long int]	16	static
layout.hpp:230:12:constexpr boost::multi::layout_t<1, SSize>::layout_t(boost::multi::layout_t<1, SSize>::extensions_type) [with SSize = long int]	80	static
layout.hpp:340:12:constexpr boost::multi::layout_t<D, SSize>::layout_t(const extensions_type&) [with long int D = 2; SSize = long int]	96	static
tuple:1326:5:>&) [with long unsigned int __i = 1; _Elements = {boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int>}]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::extensions_t<2>&]	16	static
tuple:1314:5:>&) [with long unsigned int __i = 1; _Head = boost::multi::extension_t<long int>; _Tail = {}]	32	static
tuple:337:7:static constexpr const _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(const std::_Tuple_impl<_Idx, _Head>&) [with long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	32	static
tuple:163:7:static constexpr const _Head& std::_Head_base<_Idx, _Head, false>::_M_head(const std::_Head_base<_Idx, _Head, false>&) [with long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::extension_t<long int>&]	16	static
tuple:343:17:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(const _Head&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	32	static
tuple:125:17:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	16	static
array.hpp:35:7:auto boost::multi::array_allocator<Allocator>::uninitialized_fill_n(typename std::allocator_traits<_Alloc>::pointer, typename std::allocator_traits<_Alloc>::size_type, typename std::allocator_traits<_Alloc>::value_type) [with Allocator = std::allocator<std::complex<double> >]	64	static
array.hpp:190:2:boost::multi::static_array<T, D, Alloc>::static_array(typename boost::multi::static_array<T, D, Alloc>::extensions_type, const typename boost::multi::static_array<T, D, Alloc>::element&) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	160	static
herk.hpp:94:6:decltype (boost::multi::blas::herk(boost::multi::blas::filling::lower, alpha, a, boost::multi::blas::herk(boost::multi::blas::filling::upper, alpha, a, forward<C2D>(c)))) boost::multi::blas::herk(AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>&]	48	static
layout.hpp:327:17:constexpr auto boost::multi::layout_t<D, SSize>::operator()(boost::multi::layout_t<D, SSize>::index) const [with long int D = 2; SSize = long int]	16	static
array_ref.hpp:1077:15:constexpr boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >::basic_array(const layout_t&, std::complex<double>* const&) [inherited from boost::multi::array_types<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >]	48	static
array_ref.hpp:404:20:constexpr auto boost::multi::basic_array<T, D, ElementPtr, Layout>::at_(boost::multi::index) const [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	144	static
array_ref.hpp:410:31:constexpr typename boost::multi::basic_array<T, D, ElementPtr, Layout>::types::reference boost::multi::basic_array<T, D, ElementPtr, Layout>::operator[](boost::multi::index) & [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	64	static
array_ref.hpp:1160:47:constexpr typename boost::multi::basic_array<T, 1, ElementPtr, Layout>::reference boost::multi::basic_array<T, 1, ElementPtr, Layout>::operator[](boost::multi::index) && [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	32	static
complex:463:5:constexpr bool std::operator==(const std::complex<_Tp>&, const std::complex<_Tp>&) [with _Tp = double]	48	static
lazy_ostream.hpp:79:1:boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, T> boost::unit_test::operator<<(const boost::unit_test::lazy_ostream&, const T&) [with T = boost::unit_test::basic_cstring<const char>]	48	static
range_access.h:242:5:size()) std::size(const _Container&) [with _Container = boost::multi::array<std::complex<double>, 2>]	32	static
tuple:968:19:constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&) [with _U1 = long int; _U2 = long int; typename std::enable_if<((std::_TC<true, _T1, _T2>::_MoveConstructibleTuple<_U1, _U2>() && std::_TC<true, _T1, _T2>::_ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_SrcTuple>::type>::type, std::allocator_arg_t>::value)), bool>::type <anonymous> = true; _T1 = boost::multi::extension_t<long int>; _T2 = boost::multi::extension_t<long int>]	64	static
allocator.h:138:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = std::complex<double>]	32	static
allocator.h:153:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::complex<double>]	32	static
adl.hpp:446:39:) const [with As = {std::allocator<std::complex<double> >&, std::complex<double>*&, long int}]	80	static
array.hpp:78:7:auto boost::multi::static_array<T, D, Alloc>::uninitialized_default_construct() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	64	static
array.hpp:210:11:boost::multi::static_array<T, D, Alloc>::static_array(typename boost::multi::static_array<T, D, Alloc>::extensions_type, const allocator_type&) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	160	static
herk.hpp:94:6:decltype (boost::multi::blas::herk(boost::multi::blas::filling::lower, alpha, a, boost::multi::blas::herk(boost::multi::blas::filling::upper, alpha, a, forward<C2D>(c)))) boost::multi::blas::herk(AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>]	48	static
array.hpp:784:2:boost::multi::array<T, D, A>::array(boost::multi::array<T, D, A>&&) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	64	static
array.hpp:913:7:>&) const [with TT = std::complex<double>; Args = {std::complex<double>*, boost::multi::layout_t<2, long int>}; T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::array<std::complex<double>, 2>&]	16	static
numeric.hpp:139:21:constexpr boost::multi::blas::involuter<It, F, Reference>::involuter(It, F) [with It = std::complex<double>*; F = boost::multi::blas::conjugate; Reference = boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate>]	48	static
array_ref.hpp:858:35:constexpr boost::multi::basic_array<T2, D, P2> boost::multi::basic_array<T, D, ElementPtr, Layout>::static_array_cast() const [with T2 = std::complex<double>; P2 = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	112	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::complex<double>&]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >]	16	static
array_ref.hpp:586:37:constexpr boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> > boost::multi::rotated(boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&&)	48	static
array_ref.hpp:93:29:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::element_ptr boost::multi::array_types<T, D, ElementPtr, Layout>::base() const [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	16	static
array.hpp:326:53:constexpr boost::multi::static_array<T, D, Alloc>::element_const_ptr boost::multi::static_array<T, D, Alloc>::base() const [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
core.hpp:573:16:boost::multi::blas::context* boost::multi::blas::default_context_of(const TPtr&) [with TPtr = const std::complex<double>*; typename std::enable_if<std::is_convertible<TPtr, typename std::pointer_traits<_Ptr>::element_type*>{}, int>::type <anonymous> = 0]	16	static
gemm.hpp:317:1:boost::multi::blas::gemm_range<ContextPtr, Scalar, typename A2D::const_iterator, typename B2D::const_iterator, typename A2D::decay_type> boost::multi::blas::gemm(ContextPtr, Scalar, const A2D&, const B2D&) [with ContextPtr = boost::multi::blas::context*; Scalar = double; A2D = boost::multi::array<std::complex<double>, 2>; B2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; <template-parameter-1-5> = void]	352	dynamic,bounded
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const std::complex<double>&]	16	static
array_ref.hpp:247:27:constexpr decltype(auto) boost::multi::array_iterator<Element, D, ElementPtr>::operator->() const [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	24	static
array.hpp:743:17:boost::multi::array<std::complex<double>, 2>::array(Range&&) [with Range = const boost::multi::blas::gemm_range<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >, boost::multi::array<std::complex<double>, 2> >&; <template-parameter-1-2> = void; <template-parameter-1-3> = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >; <template-parameter-1-4> = void][inherited from boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >]	32	static
gemm.hpp:307:13:boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::decay_type boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::operator+() const [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >; DecayType = boost::multi::array<std::complex<double>, 2>]	32	static
herk.hpp:94:6:decltype (boost::multi::blas::herk(boost::multi::blas::filling::lower, alpha, a, boost::multi::blas::herk(boost::multi::blas::filling::upper, alpha, a, forward<C2D>(c)))) boost::multi::blas::herk(AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>&]	48	static
range_access.h:242:5:size()) std::size(const _Container&) [with _Container = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >]	32	static
herk.hpp:94:6:decltype (boost::multi::blas::herk(boost::multi::blas::filling::lower, alpha, a, boost::multi::blas::herk(boost::multi::blas::filling::upper, alpha, a, forward<C2D>(c)))) boost::multi::blas::herk(AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>]	48	static
basic_string.h:625:9:std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	64	static
basic_string.h:263:9:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	48	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&]	16	static
basic_cstring.hpp:178:1:static boost::unit_test::basic_cstring<CharT>::value_type* boost::unit_test::basic_cstring<CharT>::null_str() [with CharT = const char]	16	static
class_properties.hpp:54:21:boost::unit_test::class_property<PropertyType>::class_property(boost::unit_test::class_property<PropertyType>::write_param_t) [with PropertyType = bool]	16	static
function_template.hpp:868:10:void boost::function0<R>::clear() [with R = void]	32	static
function_template.hpp:677:18:boost::function0<R>::vtable_type* boost::function0<R>::get_vtable() const [with R = void]	16	static
bcs_char_traits.hpp:82:24:static std::size_t boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::length(boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::const_char*) [with CharT = const char]	48	static
basic_cstring.hpp:330:1:boost::unit_test::basic_cstring<CharT>::self_type& boost::unit_test::basic_cstring<CharT>::trim_left(boost::unit_test::basic_cstring<CharT>) [with CharT = const char]	96	static
basic_cstring.hpp:374:1:boost::unit_test::basic_cstring<CharT>::self_type& boost::unit_test::basic_cstring<CharT>::trim_right(boost::unit_test::basic_cstring<CharT>) [with CharT = const char]	96	static
tuple:1314:5:>&) [with long unsigned int __i = 0; _Head = boost::multi::extension_t<long int>; _Tail = {}]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = long int&]	16	static
tuple:945:19:constexpr std::tuple<_T1, _T2>::tuple(const _T1&, const _T2&) [with _Dummy = void; typename std::enable_if<(std::_TC<std::is_same<_Dummy, void>::value, _T1, _T2>::_ConstructibleTuple<_T1, _T2>() && std::_TC<std::is_same<_Dummy, void>::value, _T1, _T2>::_ImplicitlyConvertibleTuple<_T1, _T2>()), bool>::type <anonymous> = true; _T1 = boost::multi::extension_t<long int>; _T2 = boost::multi::extension_t<long int>]	48	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::tuple<boost::multi::extension_t<long int, long int> >]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const std::tuple<boost::multi::extension_t<long int, long int> >&]	16	static
tuple:1572:9:_Is = {0}; _Tp = std::tuple<boost::multi::extension_t<long int, long int> >; _Tpls = {const std::tuple<boost::multi::extension_t<long int, long int> >&}]	80	static
wrap_stringstream.hpp:74:1:boost::basic_wrap_stringstream<CharT>::wrapped_stream& boost::basic_wrap_stringstream<CharT>::stream() [with CharT = char]	16	static
fixture.hpp:98:58:void boost::unit_test::impl_fixture::call_setup<has_setup>::operator()(U&) [with U = multi_blas_herk; bool has_setup = false]	16	static
fixture.hpp:104:58:void boost::unit_test::impl_fixture::call_teardown<has_teardown>::operator()(U&) [with U = multi_blas_herk; bool has_teardown = false]	16	static
function_template.hpp:711:5:boost::function0<R>::function0(Functor, typename boost::enable_if_<(! boost::is_integral<Functor>::value), int>::type) [with Functor = void (*)(); R = void]	48	static
complex:456:5:std::complex<_Tp> std::operator-(const std::complex<_Tp>&) [with _Tp = double]	64	static
initializer_list:79:7:constexpr const _E* std::initializer_list<_E>::end() const [with _E = std::complex<double>]	48	static
layout.hpp:261:22:constexpr boost::multi::layout_t<1, SSize>::size_type boost::multi::layout_t<1, SSize>::num_elements() const [with SSize = long int]	32	static
index_range.hpp:213:12:constexpr boost::multi::extension_t<IndexType, IndexTypeLast>::extension_t(IndexType) [with IndexType = long int; IndexTypeLast = long int]	32	static
adl.hpp:392:39:) const [with As = {const std::complex<double>*&, const std::complex<double>*&}]	80	static
utility.hpp:375:64:constexpr boost::multi::layout_t<0>::extensions_type boost::multi::extensions(const T&) [with T = std::complex<double>; <template-parameter-1-2> = void]	16	static
adl.hpp:388:48:) const [with As = {const std::complex<double>*&, const std::complex<double>*&}]	64	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const std::complex<double>*&]	16	static
stl_iterator_base_funcs.h:138:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const std::complex<double>*]	32	static
adl.hpp:343:16:constexpr auto boost::multi::xtd::alloc_uninitialized_copy(std::allocator<_CharT>&, InputIt, InputIt, ForwardIt) [with T = std::complex<double>; InputIt = const std::complex<double>*; ForwardIt = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>]	64	static
adl.hpp:482:39:) const [with As = {std::allocator<std::complex<double> >&, const std::complex<double>*&, const std::complex<double>*&, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>}]	112	static
array.hpp:146:2:boost::multi::static_array<T, D, Alloc>::static_array(It, It, const allocator_type&) [with It = const std::complex<double>*; <template-parameter-2-2> = long int; T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	176	static
array.hpp:87:7:void boost::multi::static_array<T, D, Alloc>::destroy() [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	48	static
array.hpp:258:7:void boost::multi::static_array<T, D, Alloc>::deallocate() [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	48	static
initializer_list:79:7:constexpr const _E* std::initializer_list<_E>::end() const [with _E = boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >]	48	static
adl.hpp:401:39:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >&}]	32	static
adl.hpp:249:39:) const [with As = {boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>}]	80	static
array_ref.hpp:285:28:constexpr boost::multi::array_iterator<Element, D, ElementPtr>& boost::multi::array_iterator<Element, D, ElementPtr>::operator++() [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	16	static
array_ref.hpp:1659:16:constexpr auto boost::multi::uninitialized_copy(In, In, boost::multi::array_iterator<T, N, TP>) [with In = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*; T = std::complex<double>; long int N = 2; TP = std::complex<double>*; <template-parameter-1-5> = void; <template-parameter-1-6> = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>]	160	static
adl.hpp:343:16:constexpr auto boost::multi::xtd::alloc_uninitialized_copy(std::allocator<_CharT>&, InputIt, InputIt, ForwardIt) [with T = std::complex<double>; InputIt = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*; ForwardIt = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>]	64	static
adl.hpp:482:39:) const [with As = {std::allocator<std::complex<double> >&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>}]	112	static
array.hpp:146:2:boost::multi::static_array<T, D, Alloc>::static_array(It, It, const allocator_type&) [with It = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*; <template-parameter-2-2> = long int; T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	272	static
array.hpp:87:7:void boost::multi::static_array<T, D, Alloc>::destroy() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	48	static
array.hpp:258:7:void boost::multi::static_array<T, D, Alloc>::deallocate() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	48	static
tuple:216:19:) [with _UHead = int; _UTail = {int}; <template-parameter-2-3> = void; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	64	static
array.hpp:32:2:typename std::allocator_traits<_Alloc>::pointer boost::multi::array_allocator<Allocator>::allocate(typename std::allocator_traits<_Alloc>::size_type) [with Allocator = std::allocator<std::complex<double> >]	32	static
tuple:1309:5:>&) [with long unsigned int __i = 0; _Head = boost::multi::extension_t<long int>; _Tail = {}]	32	static
array.hpp:30:2:boost::multi::array_allocator<Allocator>::array_allocator(const allocator_type&) [with Allocator = std::allocator<std::complex<double> >]	32	static
array_ref.hpp:1426:12:constexpr boost::multi::array_ref<T, D, ElementPtr>::array_ref(typename boost::multi::array_ref<T, D, ElementPtr>::element_ptr, typename boost::multi::array_ref<T, D, ElementPtr>::extensions_type) [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	128	static
adl.hpp:515:49:) const [with T1 = std::allocator<std::complex<double> >&; As = {std::complex<double>*&, long unsigned int&, std::complex<double>&}]	96	static
array.hpp:325:53:constexpr typename boost::multi::static_array<T, D, Alloc>::element_ptr boost::multi::static_array<T, D, Alloc>::base() [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array<std::complex<double>, 2>&]	16	static
herk.hpp:89:6:0, forward<C2D>(c))) boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>&; <template-parameter-1-4> = std::complex<double>*]	48	static
array_ref.hpp:345:24:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::layout_type boost::multi::basic_array<T, D, ElementPtr, Layout>::layout() const [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	48	static
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 1; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	16	static
layout.hpp:283:17:constexpr auto boost::multi::layout_t<1, SSize>::operator()(boost::multi::layout_t<1, SSize>::index) const [with SSize = long int]	16	static
array_ref.hpp:1157:53:constexpr typename boost::multi::basic_array<T, 1, ElementPtr, Layout>::reference boost::multi::basic_array<T, 1, ElementPtr, Layout>::operator[](boost::multi::index) & [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	48	static
lazy_ostream.hpp:58:5:boost::unit_test::lazy_ostream_impl<PrevType, T, StorageT>::lazy_ostream_impl(const PrevType&, const T&) [with PrevType = boost::unit_test::lazy_ostream; T = boost::unit_test::basic_cstring<const char>; StorageT = const boost::unit_test::basic_cstring<const char>&]	48	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = long int]	16	static
tuple:216:19:) [with _UHead = long int; _UTail = {long int}; <template-parameter-2-3> = void; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	64	static
new_allocator.h:80:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::complex<double>]	16	static
new_allocator.h:89:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::complex<double>]	16	static
array.hpp:29:18:boost::multi::array_allocator<Allocator>::allocator_type& boost::multi::array_allocator<Allocator>::alloc() [with Allocator = std::allocator<std::complex<double> >]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::allocator<std::complex<double> >&]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::complex<double>*&]	16	static
adl.hpp:441:48:) const [with As = {std::allocator<std::complex<double> >&, std::complex<double>*&, long int}]	64	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array<std::complex<double>, 2>]	16	static
herk.hpp:89:6:0, forward<C2D>(c))) boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>; <template-parameter-1-4> = std::complex<double>*]	48	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = boost::multi::array<std::complex<double>, 2>&]	16	static
array.hpp:47:17:boost::multi::array_allocator<Allocator>::allocator_type boost::multi::array_allocator<Allocator>::get_allocator() const [with Allocator = std::allocator<std::complex<double> >]	32	static
array_ref.hpp:754:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::begin() && [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	48	static
array.hpp:783:2:boost::multi::array<T, D, A>::array(boost::multi::array<T, D, A>&&, const typename boost::multi::array<T, D, A>::allocator_type&) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	64	static
index_range.hpp:141:17:constexpr bool boost::multi::range<IndexType, IndexTypeLast>::empty() const [with IndexType = long int; IndexTypeLast = long int]	16	static
index_range.hpp:151:24:constexpr auto boost::multi::operator==(const boost::multi::range<long int, long int>&, const boost::multi::range<long int, long int>&)	32	static
index_range.hpp:223:24:constexpr auto boost::multi::operator==(const boost::multi::extension_t<long int>&, const boost::multi::extension_t<long int>&)	32	static
layout.hpp:401:28:constexpr boost::multi::layout_t<D, SSize>::index_extension boost::multi::layout_t<D, SSize>::extension() const & [with long int D = 2; SSize = long int]	64	static
array.hpp:140:7:>&) const [with TT = std::complex<double>; Args = {std::complex<double>*, boost::multi::layout_t<2, long int>}; T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	32	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::complex<double>*&]	16	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = boost::multi::blas::conjugate&]	16	static
array_ref.hpp:348:12:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::basic_array(const layout_type&, const ElementPtr&) [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	48	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&]	16	static
layout.hpp:293:24:constexpr boost::multi::layout_t<1, SSize>& boost::multi::layout_t<1, SSize>::rotate(boost::multi::dimensionality_type) [with SSize = long int]	16	static
layout.hpp:435:22:constexpr boost::multi::layout_t<D, SSize>& boost::multi::layout_t<D, SSize>::rotate() [with long int D = 2; SSize = long int]	32	static
array_ref.hpp:576:24:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout> boost::multi::basic_array<T, D, ElementPtr, Layout>::rotated() && [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	112	static
range_access.h:58:5:begin()) std::begin(const _Container&) [with _Container = boost::multi::array<std::complex<double>, 2>]	48	static
range_access.h:78:5:end()) std::end(const _Container&) [with _Container = boost::multi::array<std::complex<double>, 2>]	48	static
array_ref.hpp:761:34:constexpr boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >::const_iterator boost::multi::begin(const boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&)	48	static
gemm.hpp:295:2:boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::gemm_range(ContextPtr, Scalar, ItA, ItA, ItB) [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >; DecayType = boost::multi::array<std::complex<double>, 2>]	24	static
array.hpp:163:2:boost::multi::static_array<T, D, Alloc>::static_array(Range&&) [with Range = const boost::multi::blas::gemm_range<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >, boost::multi::array<std::complex<double>, 2> >&; <template-parameter-2-2> = void; <template-parameter-2-3> = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >; <template-parameter-2-4> = void; T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	496	dynamic,bounded
herk.hpp:89:6:0, forward<C2D>(c))) boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>&; <template-parameter-1-4> = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >]	48	static
herk.hpp:89:6:0, forward<C2D>(c))) boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, C2D&&) [with AA = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>; <template-parameter-1-4> = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >]	48	static
basic_string.h:263:9:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	48	static
basic_string.h:243:9:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	64	static
function_template.hpp:502:14:void boost::detail::function::basic_vtable0<R>::clear(boost::detail::function::function_buffer&) const [with R = void]	32	static
bcs_char_traits.hpp:60:17:static bool boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::eq(CharT, CharT) [with CharT = const char]	16	static
basic_cstring.hpp:267:1:bool boost::unit_test::basic_cstring<CharT>::is_empty() const [with CharT = const char]	16	static
basic_cstring.hpp:572:1:static boost::unit_test::basic_cstring<CharT>::self_type boost::unit_test::basic_cstring<CharT>::default_trim_ex() [with CharT = const char]	32	static
basic_cstring.hpp:405:1:boost::unit_test::basic_cstring<CharT>& boost::unit_test::basic_cstring<CharT>::operator=(const boost::unit_test::basic_cstring<CharT>&) [with CharT = const char]	16	static
basic_cstring.hpp:497:1:boost::unit_test::basic_cstring<CharT>::value_type* boost::unit_test::basic_cstring<CharT>::end() [with CharT = const char]	16	static
bcs_char_traits.hpp:93:24:static boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::const_char* boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::find(boost::unit_test::ut_detail::bcs_char_traits_impl<CharT>::const_char*, std::size_t, CharT) [with CharT = const char]	48	static
basic_cstring.hpp:317:1:boost::unit_test::basic_cstring<CharT>::self_type& boost::unit_test::basic_cstring<CharT>::trim_left(boost::unit_test::basic_cstring<CharT>::iterator) [with CharT = const char]	32	static
basic_cstring.hpp:361:1:boost::unit_test::basic_cstring<CharT>::self_type& boost::unit_test::basic_cstring<CharT>::trim_right(boost::unit_test::basic_cstring<CharT>::iterator) [with CharT = const char]	32	static
tuple:337:7:static constexpr const _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(const std::_Tuple_impl<_Idx, _Head>&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	32	static
tuple:210:17:) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	48	static
tuple:1332:5:>&&) [with long unsigned int __i = 0; _Elements = {boost::multi::extension_t<long int, long int>}]	32	static
tuple:1572:9:_Is = {0}; _Tp = const std::tuple<boost::multi::extension_t<long int, long int> >&; _Tpls = {}]	80	static
function_template.hpp:912:10:void boost::function0<R>::assign_to(Functor) [with Functor = void (*)(); R = void]	48	static
initializer_list:71:7:constexpr std::initializer_list<_E>::size_type std::initializer_list<_E>::size() const [with _E = std::complex<double>]	16	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const std::complex<double>*]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const std::complex<double>*]	16	static
array_ref.hpp:1426:12:constexpr boost::multi::array_ref<T, D, ElementPtr>::array_ref(typename boost::multi::array_ref<T, D, ElementPtr>::element_ptr, typename boost::multi::array_ref<T, D, ElementPtr>::extensions_type) [with T = std::complex<double>; long int D = 1; ElementPtr = std::complex<double>*]	112	static
array_ref.hpp:1266:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::begin() & [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	64	static
adl.hpp:249:39:) const [with As = {const std::complex<double>*&, const std::complex<double>*&, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>&}]	80	static
adl.hpp:477:48:) const [with T = std::allocator<std::complex<double> >&; As = {const std::complex<double>*&, const std::complex<double>*&, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>}]	96	static
array.hpp:86:7:void boost::multi::static_array<T, D, Alloc>::destroy_aux(std::true_type) [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	16	static
alloc_traits.h:469:7:static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::complex<double>]	48	static
initializer_list:71:7:constexpr std::initializer_list<_E>::size_type std::initializer_list<_E>::size() const [with _E = boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >]	16	static
adl.hpp:392:39:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&}]	80	static
utility.hpp:370:6:extensions()) boost::multi::extensions(const T&) [with T = boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >; <template-parameter-1-2> = void]	48	static
array_ref.hpp:749:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::begin() & [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	64	dynamic,bounded
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >&]	16	static
adl.hpp:399:48:) const [with T = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >&; As = {}]	32	static
adl.hpp:410:39:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >&}]	32	static
array_ref.hpp:246:54:constexpr boost::multi::basic_array<Element, (D - 1), ElementPtr> boost::multi::array_iterator<Element, D, ElementPtr>::operator*() const [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	48	static
adl.hpp:401:39:) const [with As = {boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1, long int> >}]	32	static
adl.hpp:245:48:) const [with As = {boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>}]	64	static
adl.hpp:249:39:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&}]	96	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>]	16	static
adl.hpp:477:48:) const [with T = std::allocator<std::complex<double> >&; As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>}]	160	dynamic,bounded
array.hpp:86:7:void boost::multi::static_array<T, D, Alloc>::destroy_aux(std::true_type) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	16	static
tuple:348:19:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&) [with _UHead = int; long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	48	static
tuple:132:19:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&) [with _UHead = int; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	48	static
alloc_traits.h:443:7:static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::complex<double>]	32	static
tuple:334:7:static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	32	static
allocator.h:141:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = std::complex<double>]	32	static
array_ref.hpp:348:12:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::basic_array(const layout_type&, const ElementPtr&) [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	48	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = long unsigned int&]	16	static
adl.hpp:511:48:) const [with As = {std::allocator<std::complex<double> >&, std::complex<double>*&, long unsigned int&, std::complex<double>&}]	96	static
layout.hpp:451:22:constexpr boost::multi::layout_t<D, SSize>& boost::multi::layout_t<D, SSize>::rotate(boost::multi::layout_t<D, SSize>::dimensionality_type) [with long int D = 2; SSize = long int]	32	static
array.hpp:402:17:constexpr auto boost::multi::static_array<T, D, Alloc>::rotated(boost::multi::dimensionality_type) & [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	128	static
array.hpp:414:34:constexpr decltype(auto) boost::multi::rotated(boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >&)	48	static
layout.hpp:383:25:constexpr boost::multi::layout_t<2>::index boost::multi::stride(const boost::multi::layout_t<2>&)	32	static
layout.hpp:381:18:constexpr boost::multi::layout_t<D, SSize>::index boost::multi::layout_t<D, SSize>::stride() const [with long int D = 2; SSize = long int]	16	static
array.hpp:397:17:constexpr auto boost::multi::static_array<T, D, Alloc>::rotated(boost::multi::dimensionality_type) const & [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	144	static
array.hpp:415:34:constexpr decltype(auto) boost::multi::rotated(const boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >&)	48	static
herk.hpp:42:7:C2D&& boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, BB, C2D&&) [with AA = double; BB = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>&; <template-parameter-1-5> = std::complex<double>*; typename std::enable_if<boost::multi::blas::is_complex_array<C2D>{}, int>::type <anonymous> = 0]	336	dynamic,bounded
array_ref.hpp:96:28:constexpr const layout_t& boost::multi::array_types<T, D, ElementPtr, Layout>::layout() const [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	16	static
array_ref.hpp:93:29:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::element_ptr boost::multi::array_types<T, D, ElementPtr, Layout>::base() const [with T = std::complex<double>; long int D = 1; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	16	static
tuple:348:19:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&) [with _UHead = long int; long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	48	static
tuple:132:19:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&) [with _UHead = long int; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	48	static
adl.hpp:177:6:std::decay_t<decltype ((std::allocator_traits<_Alloc>::construct(alloc, std::addressof((* first))), first))> boost::multi::xtd::alloc_uninitialized_default_construct_n(Alloc&, ForwardIt, Size) [with Alloc = std::allocator<std::complex<double> >; ForwardIt = std::complex<double>*; Size = long int; T = std::complex<double>]	96	static
herk.hpp:42:7:C2D&& boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, BB, C2D&&) [with AA = double; BB = double; A2D = boost::multi::array<std::complex<double>, 2>; C2D = boost::multi::array<std::complex<double>, 2>; <template-parameter-1-5> = std::complex<double>*; typename std::enable_if<boost::multi::blas::is_complex_array<C2D>{}, int>::type <anonymous> = 0]	336	dynamic,bounded
layout.hpp:221:2:constexpr boost::multi::layout_t<1, SSize>::layout_t() [with SSize = long int]	16	static
layout.hpp:338:2:constexpr boost::multi::layout_t<D, SSize>::layout_t() [with long int D = 2; SSize = long int]	32	static
array.hpp:104:2:boost::multi::static_array<T, D, Alloc>::static_array(boost::multi::static_array<T, D, Alloc>&&, const allocator_type&) [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	128	static
index_range.hpp:91:2:constexpr boost::multi::range<IndexType, IndexTypeLast>::range() [with IndexType = long int; IndexTypeLast = long int]	16	static
index_range.hpp:214:12:constexpr boost::multi::extension_t<IndexType, IndexTypeLast>::extension_t() [with IndexType = long int; IndexTypeLast = long int]	32	static
index_range.hpp:212:12:constexpr boost::multi::extension_t<IndexType, IndexTypeLast>::extension_t(IndexType, IndexTypeLast) [with IndexType = long int; IndexTypeLast = long int]	48	static
array_ref.hpp:833:17:>&) const & [with TT = std::complex<double>; As = {std::complex<double>*, boost::multi::layout_t<2, long int>}; T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	336	dynamic,bounded
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	24	static
move.h:99:5:constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = long int&]	16	static
move.h:182:5:typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = long int]	48	static
array.hpp:441:27:constexpr boost::multi::static_array<T, D, Alloc>::const_iterator boost::multi::static_array<T, D, Alloc>::begin() const [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	80	static
array.hpp:442:27:constexpr boost::multi::static_array<T, D, Alloc>::const_iterator boost::multi::static_array<T, D, Alloc>::end() const [with T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	80	static
array_ref.hpp:759:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::const_iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::begin() const & [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	96	dynamic,bounded
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::blas::gemm_range<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >, boost::multi::array<std::complex<double>, 2> >&]	16	static
gemm.hpp:299:11:boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::iterator boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::begin() const [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >; DecayType = boost::multi::array<std::complex<double>, 2>]	128	dynamic,bounded
gemm.hpp:300:11:boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::iterator boost::multi::blas::gemm_range<ContextPtr, Scalar, ItA, ItB, DecayType>::end() const [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >; DecayType = boost::multi::array<std::complex<double>, 2>]	128	dynamic,bounded
array_ref.hpp:247:27:constexpr decltype(auto) boost::multi::array_iterator<Element, D, ElementPtr>::operator->() const [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	16	static
array_ref.hpp:182:17:constexpr Ref* boost::multi::basic_array_ptr<Ref, Layout>::operator->() [with Ref = boost::multi::basic_array<std::complex<double>, 1, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	16	static
array_ref.hpp:182:17:constexpr Ref* boost::multi::basic_array_ptr<Ref, Layout>::operator->() [with Ref = boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	16	static
array_ref.hpp:283:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::stride_type boost::multi::array_iterator<Element, D, ElementPtr>::stride() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	16	static
array_ref.hpp:247:27:constexpr decltype(auto) boost::multi::array_iterator<Element, D, ElementPtr>::operator->() const [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	16	static
array_ref.hpp:182:17:constexpr Ref* boost::multi::basic_array_ptr<Ref, Layout>::operator->() [with Ref = boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	16	static
array_ref.hpp:283:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::stride_type boost::multi::array_iterator<Element, D, ElementPtr>::stride() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	16	static
array_ref.hpp:283:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::stride_type boost::multi::array_iterator<Element, D, ElementPtr>::stride() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	16	static
gemm.hpp:47:6:auto boost::multi::blas::gemm_n(Context&&, typename It2DA::element, It2DA, Size, It2DB, typename It2DA::element, It2DC) [with Context = boost::multi::blas::context&; It2DA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; Size = long int; It2DB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >; It2DC = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>]	1584	dynamic,bounded
gemm.hpp:275:14:auto boost::multi::blas::uninitialized_copy_n(const boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>&, boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>::difference_type, ItOut) [with ItOut = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>; ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >]	112	dynamic,bounded
gemm.hpp:280:14:auto boost::multi::blas::uninitialized_copy(const boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>&, const boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>&, ItOut) [with ItOut = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>; ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >]	112	dynamic,bounded
adl.hpp:343:16:constexpr auto boost::multi::xtd::alloc_uninitialized_copy(std::allocator<_CharT>&, InputIt, InputIt, ForwardIt) [with T = std::complex<double>; InputIt = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >; ForwardIt = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>]	48	static
adl.hpp:482:39:) const [with As = {std::allocator<std::complex<double> >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>}]	112	static
array.hpp:146:2:boost::multi::static_array<T, D, Alloc>::static_array(It, It, const allocator_type&) [with It = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >; <template-parameter-2-2> = long int; T = std::complex<double>; long int D = 2; Alloc = std::allocator<std::complex<double> >]	272	static
herk.hpp:42:7:C2D&& boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, BB, C2D&&) [with AA = double; BB = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>&; <template-parameter-1-5> = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; typename std::enable_if<boost::multi::blas::is_complex_array<C2D>{}, int>::type <anonymous> = 0]	288	dynamic,bounded
herk.hpp:42:7:C2D&& boost::multi::blas::herk(boost::multi::blas::filling, AA, const A2D&, BB, C2D&&) [with AA = double; BB = double; A2D = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >; C2D = boost::multi::array<std::complex<double>, 2>; <template-parameter-1-5> = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; typename std::enable_if<boost::multi::blas::is_complex_array<C2D>{}, int>::type <anonymous> = 0]	288	dynamic,bounded
basic_string.h:243:9:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	64	static
stl_iterator_base_funcs.h:138:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*]	32	static
basic_string.tcc:206:7:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	80	static
basic_cstring.hpp:79:5:boost::unit_test::basic_cstring<CharT>::basic_cstring(boost::unit_test::basic_cstring<CharT>::pointer, LenType) [with LenType = int; CharT = const char]	16	static
basic_cstring.hpp:285:1:void boost::unit_test::basic_cstring<CharT>::clear() [with CharT = const char]	16	static
tuple:343:17:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(const _Head&) [with long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::extension_t<long int>&&]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::extension_t<long int>]	16	static
tuple:1587:2:) [with _Us = {boost::multi::extension_t<long int, long int>, const boost::multi::extension_t<long int, long int>&}; _Ret = std::tuple<boost::multi::extension_t<long int, long int>, boost::multi::extension_t<long int, long int> >]	64	static
function_base.hpp:395:9:static void boost::detail::function::functor_manager<Functor>::manage(const boost::detail::function::function_buffer&, boost::detail::function::function_buffer&, boost::detail::function::functor_manager_operation_type) [with Functor = void (*)()]	64	static
function_template.hpp:112:9:static void boost::detail::function::void_function_invoker0<FunctionPtr, R>::invoke(boost::detail::function::function_buffer&) [with FunctionPtr = void (*)(); R = void]	48	static
function_template.hpp:490:14:bool boost::detail::function::basic_vtable0<R>::assign_to(F, boost::detail::function::function_buffer&) const [with F = void (*)(); R = void]	48	static
stl_algobase.h:280:5:_Iterator std::__niter_base(_Iterator) [with _Iterator = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>]	16	static
array_ref.hpp:990:12:constexpr boost::multi::array_iterator<Element, 1, Ptr>::array_iterator(Ptr, typename boost::multi::basic_array<Element, 1, Ptr>::index) [with Element = std::complex<double>; Ptr = std::complex<double>*]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>&]	16	static
adl.hpp:245:48:) const [with As = {const std::complex<double>*&, const std::complex<double>*&, boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>&}]	64	static
new_allocator.h:119:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::complex<double>]	48	static
adl.hpp:388:48:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&}]	64	static
layout.hpp:114:37:>()) && (1 >= 1)), bool>::type <anonymous> = true][inherited from std::tuple<boost::multi::extension_t<long int, long int> >]	32	static
layout.hpp:274:28:constexpr boost::multi::layout_t<1, SSize>::extensions_type boost::multi::layout_t<1, SSize>::extensions() const [with SSize = long int]	64	static
array_ref.hpp:186:12:constexpr boost::multi::basic_array_ptr<Ref, Layout>::basic_array_ptr(typename Ref::element_ptr, const Layout&) [with Ref = boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	48	static
array_ref.hpp:252:12:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::array_iterator(typename boost::multi::basic_array<Element, (D - 1), ElementPtr>::element_ptr, boost::multi::layout_t<(D - 1), long int>, boost::multi::index) [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	48	static
array.hpp:441:27:constexpr boost::multi::static_array<T, D, Alloc>::const_iterator boost::multi::static_array<T, D, Alloc>::begin() const [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	80	static
adl.hpp:408:48:) const [with T = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >&; As = {}]	32	static
array_ref.hpp:180:20:constexpr Ref boost::multi::basic_array_ptr<Ref, Layout>::operator*() const [with Ref = boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >]	16	static
adl.hpp:399:48:) const [with T = boost::multi::basic_array<std::complex<double>, 1, std::complex<double>*, boost::multi::layout_t<1> >; As = {}]	32	static
stl_uninitialized.h:115:5:_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; _ForwardIterator = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>]	96	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&]	16	static
adl.hpp:245:48:) const [with As = {const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&}]	144	dynamic,bounded
tuple:132:19:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&) [with _UHead = int; long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	48	static
new_allocator.h:102:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::complex<double>]	48	static
tuple:160:7:static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&) [with long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	16	static
new_allocator.h:83:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = std::complex<double>]	16	static
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	24	static
adl.hpp:367:6:std::decay_t<decltype ((std::allocator_traits<_Alloc>::construct(a, std::addressof((* first)), v), first))> boost::multi::xtd::alloc_uninitialized_fill_n(Alloc&, ForwardIt, Size, const T&) [with Alloc = std::allocator<std::complex<double> >; ForwardIt = std::complex<double>*; Size = long unsigned int; T = std::complex<double>]	64	static
herk.hpp:30:6:decltype (boost::multi::base(a)) boost::multi::blas::base_aux(A&&) [with A = const boost::multi::array<std::complex<double>, 2>&; typename std::enable_if<(! boost::multi::blas::is_conjugated<A>{}), int>::type <anonymous> = 0]	32	static
herk.hpp:30:6:decltype (boost::multi::base(a)) boost::multi::blas::base_aux(A&&) [with A = boost::multi::array<std::complex<double>, 2>&; typename std::enable_if<(! boost::multi::blas::is_conjugated<A>{}), int>::type <anonymous> = 0]	32	static
array_ref.hpp:348:12:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::basic_array(const layout_type&, const ElementPtr&) [with T = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<2>]	48	static
range_access.h:242:5:size()) std::size(const _Container&) [with _Container = boost::multi::basic_array<std::complex<double>, 2, const std::complex<double>*, boost::multi::layout_t<2> >]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = const std::complex<double>*; AA = const std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:179)> [with auto:179 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = const std::complex<double>*; AA = const std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:180)> [with auto:180 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = const std::complex<double>*; AA = const std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:181)> [with auto:181 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = const std::complex<double>*; AA = const std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:182)> [with auto:182 = long int]	32	static
core.hpp:505:25:boost::multi::blas::{anonymous}::v boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = const std::complex<double>*; AA = const std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]	384	dynamic,bounded
tuple:132:19:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&) [with _UHead = long int; long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	48	static
stl_iterator_base_funcs.h:202:5:constexpr void std::advance(_InputIterator&, _Distance) [with _InputIterator = std::complex<double>*; _Distance = long int]	48	static
move.h:138:5:constexpr _Tp* std::addressof(_Tp&) [with _Tp = std::complex<double>]	32	static
alloc_traits.h:482:2:) [with _Up = std::complex<double>; _Args = {}; _Tp = std::complex<double>]	32	static
alloc_traits.h:495:2:static void std::allocator_traits<std::allocator<_CharT> >::destroy(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*) [with _Up = std::complex<double>; _Tp = std::complex<double>]	32	static
layout.hpp:412:28:constexpr boost::multi::layout_t<D, SSize>::extensions_type boost::multi::layout_t<D, SSize>::extensions() const [with long int D = 2; SSize = long int]	144	static
array_ref.hpp:759:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::const_iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::begin() const & [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	64	dynamic,bounded
array_ref.hpp:760:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::const_iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::end() const & [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	64	dynamic,bounded
adl.hpp:401:39:) const [with As = {const boost::multi::basic_array<std::complex<double>, 2, std::complex<double>*, boost::multi::layout_t<2, long int> >&}]	64	static
adl.hpp:85:38:) const [with As = {boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>}]	176	dynamic,bounded
array_ref.hpp:1077:15:constexpr boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >::basic_array(const layout_t&, const std::complex<double>* const&) [inherited from boost::multi::array_types<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >]	48	static
array_ref.hpp:186:12:constexpr boost::multi::basic_array_ptr<Ref, Layout>::basic_array_ptr(typename Ref::element_ptr, const Layout&) [with Ref = boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	48	static
array_ref.hpp:96:28:constexpr const layout_t& boost::multi::array_types<T, D, ElementPtr, Layout>::layout() const [with T = std::complex<double>; long int D = 1; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	16	static
array_ref.hpp:242:12:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::array_iterator(const Other&) [with Other = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>; <template-parameter-2-2> = const std::complex<double>*; Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	48	static
array_ref.hpp:755:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::end() && [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	48	static
numeric.hpp:144:21:constexpr boost::multi::blas::involuter<It, F, Reference>::involuter(const Other&) [with Other = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; <template-parameter-2-2> = const std::complex<double>*; It = const std::complex<double>*; F = boost::multi::blas::conjugate; Reference = boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate>]	16	static
array_ref.hpp:1077:15:constexpr boost::multi::basic_array<std::complex<double>, 1, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<1> >::basic_array(const layout_t&, const element_ptr&) [inherited from boost::multi::array_types<std::complex<double>, 1, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<1> >]	48	static
array_ref.hpp:186:12:constexpr boost::multi::basic_array_ptr<Ref, Layout>::basic_array_ptr(typename Ref::element_ptr, const Layout&) [with Ref = boost::multi::basic_array<std::complex<double>, 1, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	64	static
array_ref.hpp:252:12:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::array_iterator(typename boost::multi::basic_array<Element, (D - 1), ElementPtr>::element_ptr, boost::multi::layout_t<(D - 1), long int>, boost::multi::index) [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	64	static
gemm.hpp:230:2:boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>::gemm_iterator(ContextPtr, Scalar, ItA, ItB) [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >]	24	static
adl.hpp:392:39:) const [with As = {boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&}]	80	static
gemm.hpp:283:12:boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>::reference boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>::operator*() const [with ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >]	80	static
utility.hpp:370:6:extensions()) boost::multi::extensions(const T&) [with T = boost::multi::blas::gemm_reference<boost::multi::extensions_t<1> >; <template-parameter-1-2> = void]	32	static
array_ref.hpp:287:17:constexpr bool boost::multi::array_iterator<Element, D, ElementPtr>::operator==(const boost::multi::array_iterator<Element, D, ElementPtr>&) const [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	32	static
array_ref.hpp:193:17:constexpr bool boost::multi::basic_array_ptr<Ref, Layout>::operator==(const boost::multi::basic_array_ptr<Ref, Layout>&) const [with Ref = boost::multi::basic_array<std::complex<double>, 1, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	48	static
array_ref.hpp:270:17:constexpr bool boost::multi::array_iterator<Element, D, ElementPtr>::equal(const boost::multi::array_iterator<Element, D, ElementPtr>&) const [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	32	static
gemm.hpp:251:25:boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >::difference_type boost::multi::blas::operator-(const boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, const boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&)	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::blas::context&]	16	static
array_ref.hpp:282:31:constexpr boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >::element_ptr boost::multi::base(const boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >&)	32	static
numeric.hpp:161:35:constexpr const std::complex<double>* boost::multi::blas::underlying(const boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >&)	16	static
array_ref.hpp:282:31:constexpr const std::complex<double>* boost::multi::base(const boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>&)	32	static
array_ref.hpp:282:31:constexpr std::complex<double>* boost::multi::base(const boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&)	32	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = std::complex<double>*]	16	static
core.hpp:527:14:) [with As = {char, char, long int, long int&, long int, std::complex<double>*, const std::complex<double>*, long int, const std::complex<double>*, long int&, std::complex<double>*, std::complex<double>*, long int}]	240	dynamic,bounded
core.hpp:527:14:) [with As = {char, char, long int, long int&, long int, std::complex<double>*, const std::complex<double>*, long int, const std::complex<double>*, long int, std::complex<double>*, std::complex<double>*, long int}]	240	dynamic,bounded
core.hpp:527:14:) [with As = {char, char, long int&, long int, long int, std::complex<double>*, const std::complex<double>*, long int, const std::complex<double>*, long int, std::complex<double>*, std::complex<double>*, long int}]	240	dynamic,bounded
array_ref.hpp:292:28:constexpr boost::multi::array_iterator<Element, D, ElementPtr>& boost::multi::array_iterator<Element, D, ElementPtr>::operator+=(boost::multi::array_iterator<Element, D, ElementPtr>::difference_type) [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	32	static
array_ref.hpp:248:30:constexpr boost::multi::array_iterator<Element, D, ElementPtr> boost::multi::array_iterator<Element, D, ElementPtr>::operator+(boost::multi::array_iterator<Element, D, ElementPtr>::difference_type) const [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	80	static
basic_string.h:6121:5:std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	48	static
gemm.hpp:258:14:0, d_first)) boost::multi::blas::copy_n(const boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>&, boost::multi::blas::gemm_iterator<ContextPtr, Scalar, ItA, ItB>::difference_type, ItOut) [with ItOut = boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>; ContextPtr = boost::multi::blas::context*; Scalar = double; ItA = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ItB = boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > >]	1088	dynamic,bounded
adl.hpp:249:39:) const [with As = {boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&}]	96	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&]	16	static
adl.hpp:477:48:) const [with T = std::allocator<std::complex<double> >&; As = {boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>}]	368	dynamic,bounded
herk.hpp:35:6:decltype (underlying(boost::multi::base(a))) boost::multi::blas::base_aux(A&&) [with A = const boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&; typename std::enable_if<boost::multi::blas::is_conjugated<A>{}, int>::type <anonymous> = 0]	64	static
array_ref.hpp:585:37:constexpr boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >::basic_const_array boost::multi::rotated(const boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&)	48	static
range_access.h:242:5:size()) std::size(const _Container&) [with _Container = boost::multi::basic_array<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = std::complex<double>*; AA = std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:179)> [with auto:179 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = std::complex<double>*; AA = std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:180)> [with auto:180 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = std::complex<double>*; AA = std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:181)> [with auto:181 = long int]	32	static
core.hpp:505:25:boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = std::complex<double>*; AA = std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:182)> [with auto:182 = long int]	32	static
core.hpp:505:25:boost::multi::blas::{anonymous}::v boost::multi::blas::core::herk(UL, C, S, S, const ALPHA*, AAP, S, const BETA*, CCP, S) [with UL = char; C = char; S = long int; ALPHA = double; AAP = std::complex<double>*; AA = std::complex<double>; BETA = double; CCP = std::complex<double>*; CC = std::complex<double>; Real = double; typename std::enable_if<((((boost::multi::blas::is_z<AA>{} && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * AA{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]	384	dynamic,bounded
stl_iterator_base_funcs.h:138:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*]	32	static
basic_string.tcc:206:7:void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]	80	static
type_traits.h:152:5:bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char]	16	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*]	16	static
tuple:125:17:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(const _Head&) [with long unsigned int _Idx = 1; _Head = boost::multi::extension_t<long int>]	16	static
tuple:968:19:constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&) [with _U1 = boost::multi::extension_t<long int>; _U2 = const boost::multi::extension_t<long int>&; typename std::enable_if<((std::_TC<true, _T1, _T2>::_MoveConstructibleTuple<_U1, _U2>() && std::_TC<true, _T1, _T2>::_ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_SrcTuple>::type>::type, std::allocator_arg_t>::value)), bool>::type <anonymous> = true; _T1 = boost::multi::extension_t<long int>; _T2 = boost::multi::extension_t<long int>]	64	static
type_index.hpp:211:19:boost::typeindex::type_index boost::typeindex::type_id() [with T = void (*)()]	16	static
function_base.hpp:322:9:static void boost::detail::function::functor_manager<Functor>::manager(const boost::detail::function::function_buffer&, boost::detail::function::function_buffer&, boost::detail::function::functor_manager_operation_type, boost::detail::function::function_ptr_tag) [with Functor = void (*)()]	48	static
function_template.hpp:512:9:bool boost::detail::function::basic_vtable0<R>::assign_to(FunctionPtr, boost::detail::function::function_buffer&, boost::detail::function::function_ptr_tag) const [with FunctionPtr = void (*)(); R = void]	48	static
array_ref.hpp:1007:28:constexpr boost::multi::array_iterator<Element, 1, Ptr>& boost::multi::array_iterator<Element, 1, Ptr>::operator++() [with Element = std::complex<double>; Ptr = const std::complex<double>*]	16	static
array_ref.hpp:1007:28:constexpr boost::multi::array_iterator<Element, 1, Ptr>& boost::multi::array_iterator<Element, 1, Ptr>::operator++() [with Element = std::complex<double>; Ptr = std::complex<double>*]	16	static
stl_uninitialized.h:115:5:_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const std::complex<double>*; _ForwardIterator = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>]	64	static
stl_iterator_base_funcs.h:138:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*]	32	static
layout.hpp:269:35:constexpr boost::multi::layout_t<1, SSize>::index_extension boost::multi::layout_t<1, SSize>::extension() const & [with SSize = long int]	64	static
tuple:626:19: (_Elements) >= 1)), bool>::type <anonymous> = true; _Elements = {boost::multi::extension_t<long int, long int>}]	48	static
array_ref.hpp:1267:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::begin() && [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	32	static
array_ref.hpp:980:12:constexpr boost::multi::array_iterator<Element, 1, Ptr>::array_iterator(const boost::multi::array_iterator<EElement, 1, PPtr>&) [with EElement = std::complex<double>; PPtr = std::complex<double>*; <template-parameter-2-3> = const std::complex<double>*; Element = std::complex<double>; Ptr = const std::complex<double>*]	16	static
array.hpp:442:27:constexpr boost::multi::static_array<T, D, Alloc>::const_iterator boost::multi::static_array<T, D, Alloc>::end() const [with T = std::complex<double>; long int D = 1; Alloc = std::allocator<std::complex<double> >]	80	static
stl_uninitialized.h:76:9:static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; _ForwardIterator = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>; bool _TrivialValueTypes = false]	112	static
new_allocator.h:132:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::complex<double>]	16	static
alloc_traits.h:482:2:) [with _Up = std::complex<double>; _Args = {const std::complex<double>&}; _Tp = std::complex<double>]	48	static
array.hpp:328:50:const std::complex<double>* boost::multi::base(const boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >&)	32	static
array.hpp:327:50:std::complex<double>* boost::multi::base(boost::multi::static_array<std::complex<double>, 2, std::allocator<std::complex<double> > >&)	32	static
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<2>]	24	static
stl_algobase.h:222:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long int]	16	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = std::complex<double>*]	16	static
stl_iterator_base_funcs.h:174:5:constexpr void std::__advance(_RandomAccessIterator&, _Distance, std::random_access_iterator_tag) [with _RandomAccessIterator = std::complex<double>*; _Distance = long int]	16	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::complex<double>]	16	static
new_allocator.h:144:2:) [with _Up = std::complex<double>; _Args = {}; _Tp = std::complex<double>]	32	static
new_allocator.h:151:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = std::complex<double>; _Tp = std::complex<double>]	16	static
tuple:1470:5:) [with _Elements = {boost::multi::extension_t<long int, long int>}]	32	static
array_ref.hpp:252:12:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::array_iterator(typename boost::multi::basic_array<Element, (D - 1), ElementPtr>::element_ptr, boost::multi::layout_t<(D - 1), long int>, boost::multi::index) [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	48	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::basic_array<std::complex<double>, 2, std::complex<double>*, boost::multi::layout_t<2> >&]	16	static
adl.hpp:399:48:) const [with T = const boost::multi::basic_array<std::complex<double>, 2, std::complex<double>*, boost::multi::layout_t<2> >&; As = {}]	64	static
adl.hpp:81:47:) const [with As = {boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>}]	160	dynamic,bounded
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 1; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<1>]	16	static
array_ref.hpp:750:28:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::iterator boost::multi::basic_array<T, D, ElementPtr, Layout>::end() & [with T = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<2>]	64	dynamic,bounded
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 1; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<1>]	16	static
adl.hpp:388:48:) const [with As = {boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&}]	272	dynamic,bounded
gemm.hpp:220:13:const Ext& boost::multi::blas::gemm_reference<Ext>::extensions() const [with Ext = boost::multi::extensions_t<1>]	16	static
numeric.hpp:149:7:bool boost::multi::blas::involuter<It, F, Reference>::operator==(const boost::multi::blas::involuter<It, F, Reference>&) const [with It = const std::complex<double>*; F = boost::multi::blas::conjugate; Reference = boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate>]	16	static
array_ref.hpp:96:28:constexpr const layout_t& boost::multi::array_types<T, D, ElementPtr, Layout>::layout() const [with T = std::complex<double>; long int D = 1; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<1>]	16	static
layout.hpp:287:17:constexpr bool boost::multi::layout_t<1, SSize>::operator==(const boost::multi::layout_t<1, SSize>&) const [with SSize = long int]	16	static
array_ref.hpp:288:35:constexpr boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>::difference_type boost::multi::operator-(const boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>&, const boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>&)	32	static
array_ref.hpp:281:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::element_ptr boost::multi::array_iterator<Element, D, ElementPtr>::base() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >]	16	static
array_ref.hpp:281:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::element_ptr boost::multi::array_iterator<Element, D, ElementPtr>::base() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	16	static
array_ref.hpp:281:31:constexpr boost::multi::array_iterator<Element, D, ElementPtr>::element_ptr boost::multi::array_iterator<Element, D, ElementPtr>::base() const & [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = char]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const std::complex<double>*]	16	static
complex:486:5:constexpr bool std::operator!=(const std::complex<_Tp>&, const _Tp&) [with _Tp = double]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:137)> [with auto:137 = long int]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:138)> [with auto:138 = long int]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:139)> [with auto:139 = long int]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:140)> [with auto:140 = long int]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:141)> [with auto:141 = long int]	32	static
core.hpp:480:28:boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]::<lambda(auto:142)> [with auto:142 = long int]	32	static
core.hpp:480:28:boost::multi::blas::{anonymous}::v boost::multi::blas::core::gemm(char, char, ssize_t, ssize_t, ssize_t, const ALPHA*, AAP, ssize_t, BBP, ssize_t, const BETA*, CCP, ssize_t) [with ALPHA = std::complex<double>; AAP = const std::complex<double>*; AA = const std::complex<double>; BBP = const std::complex<double>*; BB = const std::complex<double>; BETA = std::complex<double>; CCP = std::complex<double>*; CC = std::complex<double>; typename std::enable_if<((((((boost::multi::blas::is_z<SX>{} && boost::multi::blas::is_z<SY>{}) && boost::multi::blas::is_z<CC>{}) && std::is_assignable<CC&, decltype (((ALPHA{} * AA{}) * BB{}))>{}) && is_convertible_v<AAP, AA*>) && is_convertible_v<BBP, BB*>) && is_convertible_v<CCP, CC*>), int>::type <anonymous> = 0]	448	dynamic,bounded
array_ref.hpp:272:17:constexpr void boost::multi::array_iterator<Element, D, ElementPtr>::advance(boost::multi::array_iterator<Element, D, ElementPtr>::difference_type) [with Element = std::complex<double>; long int D = 2; ElementPtr = std::complex<double>*]	16	static
adl.hpp:245:48:) const [with As = {boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >&, boost::multi::array_iterator<std::complex<double>, 2, std::complex<double>*>&}]	144	dynamic,bounded
array_ref.hpp:95:31:constexpr boost::multi::array_types<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >::element_ptr boost::multi::base(const boost::multi::array_types<std::complex<double>, 2, boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >, boost::multi::layout_t<2> >&)	32	static
numeric.hpp:161:35:constexpr std::complex<double>* boost::multi::blas::underlying(const boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >&)	16	static
array_ref.hpp:580:30:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::basic_const_array boost::multi::basic_array<T, D, ElementPtr, Layout>::rotated() const & [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	128	static
type_traits.h:152:5:bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char]	16	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*]	16	static
tuple:216:19:) [with _UHead = boost::multi::extension_t<long int>; _UTail = {const boost::multi::extension_t<long int, long int>&}; <template-parameter-2-3> = void; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>; _Tail = {boost::multi::extension_t<long int, long int>}]	64	static
stl_type_index.hpp:226:23:static boost::typeindex::stl_type_index boost::typeindex::stl_type_index::type_id() [with T = void (*)()]	32	static
function_base.hpp:259:9:static void boost::detail::function::functor_manager_common<Functor>::manage_ptr(const boost::detail::function::function_buffer&, boost::detail::function::function_buffer&, boost::detail::function::functor_manager_operation_type) [with Functor = void (*)()]	64	static
array_ref.hpp:1011:69:constexpr typename std::iterator_traits<_II>::reference boost::multi::array_iterator<Element, 1, Ptr>::operator*() const [with Element = std::complex<double>; Ptr = std::complex<double>*]	16	static
array_ref.hpp:1011:69:constexpr typename std::iterator_traits<_II>::reference boost::multi::array_iterator<Element, 1, Ptr>::operator*() const [with Element = std::complex<double>; Ptr = const std::complex<double>*]	16	static
stl_uninitialized.h:76:9:static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const std::complex<double>*; _ForwardIterator = boost::multi::array_iterator<std::complex<double>, 1, std::complex<double>*>; bool _TrivialValueTypes = false]	80	static
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const boost::multi::array<std::complex<double>, 1, std::allocator<std::complex<double> > >*]	16	static
tuple:348:19:constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl(_UHead&&) [with _UHead = boost::multi::extension_t<long int>; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	48	static
array_ref.hpp:1271:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::end() && [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	32	static
array_ref.hpp:1010:17:constexpr bool boost::multi::array_iterator<Element, 1, Ptr>::operator!=(const boost::multi::array_iterator<Element, 1, Ptr>&) const [with Element = std::complex<double>; Ptr = const std::complex<double>*]	16	static
stl_construct.h:74:5:) [with _T1 = std::complex<double>; _Args = {const std::complex<double>&}]	48	static
new_allocator.h:144:2:) [with _Up = std::complex<double>; _Args = {const std::complex<double>&}; _Tp = std::complex<double>]	64	static
stl_algobase.h:1059:5:bool std::equal(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>]	288	dynamic,bounded
stl_iterator_base_funcs.h:138:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >]	224	dynamic,bounded
array_ref.hpp:93:29:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::element_ptr boost::multi::array_types<T, D, ElementPtr, Layout>::base() const [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	16	static
array_ref.hpp:348:12:constexpr boost::multi::basic_array<T, D, ElementPtr, Layout>::basic_array(const layout_type&, const ElementPtr&) [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	48	static
tuple:132:19:constexpr std::_Head_base<_Idx, _Head, false>::_Head_base(_UHead&&) [with _UHead = boost::multi::extension_t<long int>; long unsigned int _Idx = 0; _Head = boost::multi::extension_t<long int>]	32	static
type_index_facade.hpp:187:13:bool boost::typeindex::operator==(const TypeInfo&, const boost::typeindex::type_index_facade<Derived, TypeInfo>&) [with Derived = boost::typeindex::stl_type_index; TypeInfo = std::type_info]	48	static
array_ref.hpp:1270:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::end() & [with T = std::complex<double>; ElementPtr = std::complex<double>*; Layout = boost::multi::layout_t<1>]	64	static
stl_algobase.h:280:5:_Iterator std::__niter_base(_Iterator) [with _Iterator = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>]	24	static
stl_algobase.h:841:5:bool std::__equal_aux(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>]	160	dynamic,bounded
stl_iterator_base_types.h:205:5:constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >]	16	static
stl_iterator_base_funcs.h:98:5:constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = boost::multi::blas::gemm_iterator<boost::multi::blas::context*, double, boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 2, boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> > > >]	16	static
array_ref.hpp:109:12:constexpr boost::multi::array_types<T, D, ElementPtr, Layout>::array_types(const layout_t&, const element_ptr&) [with T = std::complex<double>; long int D = 2; ElementPtr = boost::multi::blas::involuter<const std::complex<double>*, boost::multi::blas::conjugate, boost::multi::blas::involuted<const std::complex<double>&, boost::multi::blas::conjugate> >; Layout = boost::multi::layout_t<2>]	24	static
type_index_facade.hpp:154:35:constexpr bool boost::typeindex::operator==(const boost::typeindex::type_index_facade<Derived, TypeInfo>&, const boost::typeindex::type_index_facade<Derived, TypeInfo>&) [with Derived = boost::typeindex::stl_type_index; TypeInfo = std::type_info]	32	static
index_range.hpp:57:17:constexpr auto boost::multi::iterator_facade<Self, ValueType, AccessCategory, Reference, DifferenceType, Pointer>::operator!=(const self_type&) const [with Self = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ValueType = void; AccessCategory = std::random_access_iterator_tag; Reference = const boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >&; DifferenceType = long int; Pointer = void*]	32	static
array_ref.hpp:285:28:constexpr boost::multi::array_iterator<Element, D, ElementPtr>& boost::multi::array_iterator<Element, D, ElementPtr>::operator++() [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	16	static
layout.hpp:270:35:constexpr boost::multi::layout_t<1>::index_extension boost::multi::extension(const boost::multi::layout_t<1>&)	32	static
array_ref.hpp:1298:17:constexpr bool boost::multi::basic_array<T, 1, ElementPtr, Layout>::operator==(const Array&) const & [with Array = boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >; T = std::complex<double>; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<1>]	144	dynamic,bounded
array_ref.hpp:246:54:constexpr boost::multi::basic_array<Element, (D - 1), ElementPtr> boost::multi::array_iterator<Element, D, ElementPtr>::operator*() const [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	48	static
array_ref.hpp:180:20:constexpr Ref boost::multi::basic_array_ptr<Ref, Layout>::operator*() const [with Ref = boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	16	static
stl_algobase.h:817:2:static bool std::__equal<_BoolType>::equal(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; bool _BoolType = false]	96	static
index_range.hpp:49:29:constexpr const self_type& boost::multi::iterator_facade<Self, ValueType, AccessCategory, Reference, DifferenceType, Pointer>::self() const [with Self = boost::multi::array_iterator<std::complex<double>, 2, const std::complex<double>*>; ValueType = void; AccessCategory = std::random_access_iterator_tag; Reference = const boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >&; DifferenceType = long int; Pointer = void*]	16	static
array_ref.hpp:287:17:constexpr bool boost::multi::array_iterator<Element, D, ElementPtr>::operator==(const boost::multi::array_iterator<Element, D, ElementPtr>&) const [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	32	static
array_ref.hpp:1265:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::const_iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::begin() const & [with T = std::complex<double>; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<1>]	64	static
array_ref.hpp:1269:27:constexpr boost::multi::basic_array<T, 1, ElementPtr, Layout>::const_iterator boost::multi::basic_array<T, 1, ElementPtr, Layout>::end() const & [with T = std::complex<double>; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<1>]	64	static
adl.hpp:401:39:) const [with As = {const boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1, long int> >&}]	32	static
adl.hpp:85:38:) const [with As = {boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>}]	96	dynamic,bounded
array_ref.hpp:193:17:constexpr bool boost::multi::basic_array_ptr<Ref, Layout>::operator==(const boost::multi::basic_array_ptr<Ref, Layout>&) const [with Ref = boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >; Layout = boost::multi::layout_t<1>]	48	static
array_ref.hpp:270:17:constexpr bool boost::multi::array_iterator<Element, D, ElementPtr>::equal(const boost::multi::array_iterator<Element, D, ElementPtr>&) const [with Element = std::complex<double>; long int D = 2; ElementPtr = const std::complex<double>*]	32	static
array_ref.hpp:990:12:constexpr boost::multi::array_iterator<Element, 1, Ptr>::array_iterator(Ptr, typename boost::multi::basic_array<Element, 1, Ptr>::index) [with Element = std::complex<double>; Ptr = const std::complex<double>*]	16	static
move.h:74:5:constexpr _Tp&& std::forward(typename std::remove_reference<_Tp>::type&) [with _Tp = const boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >&]	16	static
adl.hpp:399:48:) const [with T = const boost::multi::basic_array<std::complex<double>, 1, const std::complex<double>*, boost::multi::layout_t<1> >&; As = {}]	32	static
adl.hpp:81:47:) const [with As = {boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>, boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>}]	80	static
array_ref.hpp:96:28:constexpr const layout_t& boost::multi::array_types<T, D, ElementPtr, Layout>::layout() const [with T = std::complex<double>; long int D = 1; ElementPtr = const std::complex<double>*; Layout = boost::multi::layout_t<1>]	16	static
stl_algobase.h:1059:5:bool std::equal(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>]	112	static
stl_algobase.h:841:5:bool std::__equal_aux(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>]	96	static
stl_algobase.h:817:2:static bool std::__equal<_BoolType>::equal(_II1, _II1, _II2) [with _II1 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; _II2 = boost::multi::array_iterator<std::complex<double>, 1, const std::complex<double>*>; bool _BoolType = false]	80	static
lazy_ostream.hpp:56:7:boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, boost::unit_test::basic_cstring<const char>, const boost::unit_test::basic_cstring<const char>&>::~lazy_ostream_impl()	32	static
lazy_ostream.hpp:56:7:virtual boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, boost::unit_test::basic_cstring<const char>, const boost::unit_test::basic_cstring<const char>&>::~lazy_ostream_impl()	32	static
herk.cpp:49:1:void __static_initialization_and_destruction_0(int, int)	144	static
lazy_ostream.hpp:65:29:std::ostream& boost::unit_test::lazy_ostream_impl<PrevType, T, StorageT>::operator()(std::ostream&) const [with PrevType = boost::unit_test::lazy_ostream; T = boost::unit_test::basic_cstring<const char>; StorageT = const boost::unit_test::basic_cstring<const char>&]	32	static
io.hpp:51:1:std::basic_ostream<_CharT, _Traits>& boost::unit_test::operator<<(std::basic_ostream<_CharT, _Traits>&, const boost::unit_test::basic_cstring<CharT2>&) [with CharT1 = char; Tr = std::char_traits<char>; CharT2 = const char]	128	static
basic_cstring.hpp:488:1:const value_type* boost::unit_test::basic_cstring<CharT>::begin() const [with CharT = const char]	16	static
basic_cstring.hpp:506:1:const value_type* boost::unit_test::basic_cstring<CharT>::end() const [with CharT = const char]	16	static
herk.cpp:49:1:cpp)	16	static
