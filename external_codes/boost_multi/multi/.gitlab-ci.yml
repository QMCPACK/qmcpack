# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# This file is a template, and might need editing before it works on your project.
#image: golang:latest

#variables:
#  # Please edit to your GitLab project
#  REPO_NAME: gitlab.com/namespace/project

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
#before_script:
#  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
#  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
#  - cd $GOPATH/src/$REPO_NAME
#    - apt upgrade -y --quiet
# nvidia-cuda-dev  nvidia-smi
#      - sh ./array_ptr.cpp
#      - sh ./array_ref.cpp
#      - sh ./sort.cpp
#      - sh ./comparisons.cpp
#      - sh ./constructors.cpp
#      - sh ./initializer_list.cpp
#      - sh ./layout.cpp
#      - sh ./fill.cpp
#      - sh ./rotated.cpp
#      - sh ./allocator.cpp
#      - sh ./reextent.cpp

#      - DEBIAN_FRONTEND=noninteractive apt install --assume-yes  build-essential 
#      - DEBIAN_FRONTEND=noninteractive apt-get update
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++-7

image: debian:testing

variables:
  CXX: "c++"
  DOCKER_DRIVER: overlay2

before_script:
    - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
    - apt update --quiet
    - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev libboost-timer-dev libtbb-dev libboost-serialization-dev libboost-iostreams-dev librange-v3-dev valgrind

stages:
    - test
#    - build

gcc:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++
      - ln --symbolic --force . ../multi
      - export CXX="g++     -x c++  -Wall -Wextra -Wpedantic -Ofast "
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

gcc8:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++-8 g++-10
      - ln --symbolic --force . ../multi
      - export CXX="g++-8     -x c++  -Wall -Wextra -Wpedantic -Ofast "
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clang:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang
      - ln --symbolic --force . ../multi
      - export CXX="clang++ -x c++ -Wall -Wextra -Wpedantic -Wmove -Ofast "
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clang8:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang-8
      - ln --symbolic --force . ../multi
      - export CXX="clang++-8 -x c++ -Wall -Wextra -Wpedantic -Wmove -Ofast "
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clang10:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang-10
      - ln --symbolic --force . ../multi
      - export CXX="clang++-10 -x c++ -Wall -Wextra -Wpedantic -Wmove -Ofast "
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

nvcc:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++ nvidia-cuda-toolkit 
      - ln --symbolic --force . ../multi
      - export CXX="nvcc    -x cu --compiler-options=-Wall,-Wextra,-O3"
      - $CXX --version
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

blas:
    stage: test
    script:
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++ pkg-config libblas-dev libblas64-dev nvidia-cuda-toolkit
      - ln --symbolic --force . ../multi
      - export CXX="g++     -x c++  -Wall -Wextra -Wpedantic -Ofast "
      - $CXX --version
      - cd adaptors/blas
      - for a in ./*.hpp; do echo $a; sh $a || exit; echo "\n"; done;

