# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# Copyright 2020-2023 Alfredo A. Correa

# Install docker (for local CI or to set up CI machine)
#   sudo apt install docker.io
# Install gitlab-runner
#    curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash
#    sudo apt-get install gitlab-runner

image: debian:stable

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CODECOV_TOKEN: "999feb5b-a599-4d02-b9c5-46d977247f3a"
  RT_VERSION: "0.1"

g++:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - g++ --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure -T Test

coverage:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake curl g++ gcovr git make lcov libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config wget
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-DNDEBUG --coverage -O0 -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_EXE_LINKER_FLAGS="--coverage"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure -T Test
    - ctest -j 2 --output-on-failure -T Coverage
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
    # - lcov --directory . --capture --output-file coverage.info
    # - lcov --remove coverage.info '/usr/*' --output-file coverage.info
    # - lcov --list coverage.info && genhtml coverage.info
    - bash <(curl -s https://codecov.io/bash) || echo 'Codecov failed to upload'
  coverage: /^\s*Percentage\s+Coverage:\s*\d+.\d+\%/
  # coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
  needs: ["g++"]

g++ cppcheck:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake cppcheck g++ make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - g++ --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--inline-suppr;--std=c++17;--check-config;--error-exitcode=1"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure -T Test
  needs: ["g++"]

g++ sanitizer:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-sanitize-recover=all"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ASAN_OPTIONS="new_delete_type_mismatch=0:check_initialization_order=true:strict_init_order=true:detect_stack_use_after_return=true:detect_odr_violation=1" ctest -j 2 --output-on-failure -T Test
  needs: ["g++"]

g++-7:
  stage: build
  image: debian:oldoldstable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++-7 make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config wget
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-x86_64.sh --no-verbose
    - sh ./cmake-3.27.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr
    - cmake --version
    - g++-7 --version
    - mkdir build && cd build
    - CXX=g++-7 CXXFLAGS="-DBOOST_TEST_MAIN -DBOOST_TEST_DYN_LINK" cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure -T Test
  needs: ["g++"]

g++-13 c++20:
  stage: build
  image: debian:testing
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++-13 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev valgrind
    - mkdir build && cd build
    - CXX=g++-13 cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++"]

g++-13 c++23:
  stage: build
  image: debian:testing
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++-13 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev valgrind
    - mkdir build && cd build
    - CXX=g++-13 cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=23
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++-13 c++20"]

clang++:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure

deb:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
    - cpack -G DEB
    - ls -all
    - dpkg -i multi_all.deb
    - ls -all /usr/include/multi
    - c++ ../test/main.cpp
  artifacts:
    paths:
      - build/multi_all.deb
  needs: ["g++", "clang++"]

clang++ libc++:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libc++-dev libc++abi-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-stdlib=libc++ -D_LIBCPP_DEBUG=1 -D_LIBCPP_ENABLE_DEBUG_MODE=1 -D_LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY=1 -D_LIBCPP_DEBUG_STRICT_WEAK_ORDERING_CHECK=1"
    - cmake --build . --target main.cpp.x
    - test/main.cpp.x
  needs: ["clang++"]

clang++ tidy:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang clang-tidy cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang-tidy --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CLANG_TIDY=clang-tidy
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

clang++ cpplint:
  stage: build
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang cmake cpplint libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - clang++ --version
    - cpplint --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_CPPLINT="cpplint;--quiet"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

clang++ sani:
  stage: build
  image: debian:testing
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang-13 cmake make libllvm14 libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++-13 --version
    - CXX=clang++-13 cmake .. -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-sanitize-recover=all"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - export ASAN_OPTIONS="new_delete_type_mismatch=0:check_initialization_order=true:strict_init_order=true:detect_stack_use_after_return=true:detect_odr_violation=1"
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

clang++-14 c++20:
  stage: build
  image: debian:testing
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang-14 cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++-14 --version
    - CXX=clang++-14 cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["clang++"]

clang++-15 c++23:
  stage: build
  image: debian:latest
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang-15 cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++-15 --version
    - CXX=clang++-15 cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=23
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["clang++-14 c++20"]

clang++-7:
  stage: build
  image: debian:oldoldstable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang-7 cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config wget
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-x86_64.sh --no-verbose
    - sh ./cmake-3.27.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr
    - mkdir build && cd build
    - clang++-7 --version
    - CXX=clang++-7 CXXFLAGS="-DBOOST_TEST_DYN_LINK" cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

oneapi:
  stage: build
  image: intel/oneapi-hpckit:2023.0.0-devel-ubuntu22.04
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - icpx --version
    - CXX=icpx cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --parallel 2 --output-on-failure

oneapi-latest c++20:
  stage: build
  image: intel/oneapi-hpckit:latest
  allow_failure: false
  script:  # https://www.intel.com/content/www/us/en/docs/oneapi/installation-guide-linux/2023-0/apt.html
    - wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
    - echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl g++ libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - icpx --version
    - CXX=icpx cmake .. -DCMAKE_BUILD_TYPE=Release  -DCMAKE_CXX_STANDARD=20
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --parallel 2 --output-on-failure
  needs: ["oneapi"]

oneapi-2022.2:
  stage: build
  image: intel/oneapi-hpckit:2022.2-devel-ubuntu20.04
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl g++ libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - icpx --version
    - CXX=icpx cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --parallel 2 --output-on-failure
  needs: ["oneapi"]

nvhpc:
  stage: build
  image: nvcr.io/nvidia/nvhpc:22.11-devel-cuda_multi-ubuntu22.04
  script:
    - nvidia-smi
    - apt-get update && apt-get install --no-install-recommends -y cmake make libboost-test-dev libboost-serialization-dev
    - /opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ --version
    - mkdir build && cd build
    - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ cmake ..
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure

nvhpc-22.7:
  stage: build
  image: nvcr.io/nvidia/nvhpc:22.7-devel-cuda_multi-ubuntu22.04
  script:
    - nvidia-smi
    - apt-get update && apt-get install --no-install-recommends -y cmake make libboost-test-dev libboost-serialization-dev
    - /opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ --version
    - mkdir build && cd build
    - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ cmake ..
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["nvhpc"]

nvhpc-23.9 c++20:
  stage: build
  image: nvcr.io/nvidia/nvhpc:23.9-devel-cuda_multi-ubuntu22.04
  script:
    - nvidia-smi
    - apt-get update && apt-get install --no-install-recommends -y cmake make libboost-test-dev libboost-serialization-dev
    - /opt/nvidia/hpc_sdk/Linux_x86_64/2023/compilers/bin/nvc++ --version
    - mkdir build && cd build
    - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/2023/compilers/bin/nvc++ cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["nvhpc"]

cuda:
  stage: build
  image: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu22.04
  tags:
    - nvidia-docker
  script:
    - nvidia-smi
    - apt-get -qq update && apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
    - mkdir build && cd build
    - ls /usr/local
    - ls /usr/local/cuda-11/bin
    - /usr/local/cuda-11/bin/nvcc --version
    - CUDACXX=/usr/local/cuda-11/bin/nvcc cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_ARCHITECTURES=61
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure  # doesn't run
    - ../build/include/multi/adaptors/thrust/test/speed.cu.x
    - ../build/include/multi/adaptors/thrust/test/speed_algo.cu.x
    - ../build/include/multi/adaptors/fftw/test/combinations.cpp.x
  needs: ["g++"]

cuda-11.4.3:
  stage: build
  image: nvcr.io/nvidia/cuda:11.4.3-devel-ubuntu20.04
  tags:
    - nvidia-docker
  script:
    - nvidia-smi
    - apt-get -qq update
    - DEBIAN_FRONTEND=noninteractive  apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-x86_64.sh --no-verbose
    - sh ./cmake-3.27.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr
    - cmake --version
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc --version
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_ARCHITECTURES=61
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["cuda"]

cuda-12.1.1:  # last version: https://gitlab.com/nvidia/container-images/cuda/-/blob/master/doc/container_tags.pdf
  stage: build
  image: nvcr.io/nvidia/cuda:12.1.1-devel-ubuntu22.04  # nvcr.io/nvidia/cuda:12.2.2-devel-ubuntu22.04
  tags:
    - nvidia-docker
  script:
    - nvidia-smi
    - apt-get -qq update && apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc --version
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_ARCHITECTURES=61
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["cuda"]

# cuda-12.2.0:  # last version: httpss://gitlab.com/nvidia/container-images/cuda/-/blob/master/doc/container_tags.pdf
#   stage: build
#   image: nvcr.io/nvidia/cuda:12.2.0-devel-ubuntu22.04
#   allow_failure: true  # 12.2 image not working at the moment
#   tags:
#     - nvidia-docker
#   script:
#     - nvidia-smi
#     - apt-get -qq update && apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
#     - mkdir build && cd build
#     - /usr/local/cuda/bin/nvcc --version
#     - CUDACXX=/usr/local/cuda/bin/nvcc cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_ARCHITECTURES=61
#     - cmake --build . --parallel 2 || cmake --build . --verbose
#     - ctest -j 2 --output-on-failure
#   needs: ["cuda"]

rocm:
  stage: build
  image: rocm/dev-ubuntu-22.04
  allow_failure: true
  tags:
    - nvidia-docker
  script:
    - apt-get -qq update
    - apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev wget gpg
    - apt-get install --no-install-recommends -y rocthrust-dev hipblas-dev hipfft-dev rocm-device-libs
    - /opt/rocm/bin/hipconfig --full
    - HIPCC_VERBOSE=1 /opt/rocm/bin/hipcc --version
    - cmake --version
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-x86_64.sh --no-verbose
    - sh ./cmake-3.27.0-rc3-linux-x86_64.sh --skip-license --prefix=/usr
    - cmake --version
    - mkdir build && cd build
    - export PATH=/opt/rocm/bin:/opt/rocm/llvm/bin:${PATH}
    - export CMAKE_PREFIX_PATH=/opt/rocm:${CMAKE_PREFIX_PATH}
    - export ROCM_PATH=/opt/rocm
    - export HIP_PATH=/opt/rocm
    - cmake .. -DENABLE_HIP=1 -DCMAKE_HIP_ARCHITECTURES=gfx90a
    - cmake --build . --parallel 2 || cmake --build . --verbose --parallel 1
    - ctest --output-on-failure
  needs: ["clang++", "g++"]

circle:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-11 gzip libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest ; cd build_latest
    - wget https://www.circle-lang.org/linux/build_198.tgz --no-verbose
    - tar -zxvf build_???.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CIRCLE=1
    - cmake --build . --parallel 2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure

circle-187:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-11 gzip libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest ; cd build_latest
    - wget https://www.circle-lang.org/linux/build_187.tgz --no-verbose
    - tar -zxvf build_???.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CIRCLE=1
    - cmake --build . --parallel 2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["circle"]

circle-latest:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-11 gzip libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest ; cd build_latest
    - wget https://www.circle-lang.org/linux/build_latest.tgz --no-verbose
    - tar -zxvf build_*.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CIRCLE=1
    - cmake --build . --parallel 2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["circle"]

inq:
  allow_failure: false
  stage: test
  image: debian:stable
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake g++ git gfortran libopenmpi-dev libblas-dev libboost-filesystem-dev libboost-iostreams-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev make pkg-config python3-dev
    - export PREFIX=`mktemp -d`
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - git submodule update
    - cd external_libs/multi
    - git checkout $CI_COMMIT_SHA  # check that multi repo is mirrored correctly
    - cd ../..
    - mkdir build && cd build
    - cmake .. --install-prefix=$PREFIX -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 4 || cmake --build . --parallel 1
    - cmake --install .
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - export OMPI_MCA_rmaps_base_oversubscribe=1
    - ctest -j 2 --output-on-failure --timeout 600
    - INQ_EXEC_ENV="mpirun --oversubscribe -n 4" ctest --output-on-failure --timeout 600
  needs: ["g++"]

inq cuda:
  allow_failure: false
  stage: test
  image: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu22.04
  tags:
    - nvidia-docker
  before_script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake git gfortran libopenmpi-dev libblas-dev libboost-filesystem-dev libboost-iostreams-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev pkg-config python3-dev
  script:
    - nvidia-smi
    - export PREFIX=`mktemp -d`
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - cd external_libs/multi
    - git checkout $CI_COMMIT_SHA
    - cd ../..
    - rm -f cmake/FindNCCL.cmake  # disable NCCL workaround
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc --version
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake .. --install-prefix=$PREFIX -DENABLE_CUDA=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_ARCHITECTURES=61
    - cmake --build . --parallel 4 || cmake --build . --parallel 1
    - cmake --install .
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - export OMPI_MCA_rmaps_base_oversubscribe=1
    - ctest -j 2 --output-on-failure --timeout 2400
    - INQ_EXEC_ENV="mpirun --oversubscribe -n 4" ctest --output-on-failure --timeout 2400
  timeout: 2 hours 30 minutes
  needs: ["cuda", "inq"]

qmcpack:
  stage: test
  image: debian:latest
  before_script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake g++ git gfortran libblas-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev make numdiff pkg-config python3 python3-h5py python3-numpy python3-mpi4py python3-scipy libxml2-dev
  script:
    - git clone --depth=1 https://github.com/QMCPACK/qmcpack.git
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_SHA || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
  needs: ["g++"]

qmcpack-cuda:
  stage: test
  image: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu22.04
  tags:
    - nvidia-docker
  before_script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake git libopenmpi-dev cmake g++ git gfortran libblas-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev make numdiff pkg-config python3 python3-h5py python3-numpy python3-mpi4py python3-scipy libxml2-dev
  script:
    - nvidia-smi
    - git clone --depth 1 https://github.com/QMCPACK/qmcpack.git
    # - git clone https://github.com/correaa/qmcpack.git --branch fix_shm_uninitcopy
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_SHA # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd build
    - nvcc --version
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake .. -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++ -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" -DCMAKE_CUDA_ARCHITECTURES=61
    - make -j 4 ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 ctest -R ppconvert --output-on-failure
    - OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 ctest -R afqmc     --output-on-failure
  needs: ["qmcpack","cuda"]
