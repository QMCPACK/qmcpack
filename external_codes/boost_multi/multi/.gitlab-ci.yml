# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# Â© Alfredo A. Correa 2020-2021

image: debian:testing

g++-latest:
  stage: test
  script:
    - export CXX="g++"
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build .
    - ctest --output-on-failure
    - make install

g++-latest-std20:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_STANDARD=20
    - cmake --build . --verbose
    - ctest --output-on-failure

g++-current-debug:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - ctest --output-on-failure

g++-current-asan:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - CXXFLAGS="-g -O1 -fsanitize=address -fno-omit-frame-pointer" cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - ctest --output-on-failure

g++-current-codecov:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev curl gcovr lcov
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - CXXFLAGS="-ftest-coverage -fprofile-arcs --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"   cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-lgcov --coverage" -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - ctest --output-on-failure -T Test -T Coverage
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
    - lcov --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info 
    - lcov --list coverage.info
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      cobertura: build/coverage.xml

g++-current-release:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --verbose
    - ctest --output-on-failure

#g++-7-std17:
#  stage: test
#  image: vistart/cuda:10.2-ubuntu20.04
#  script:
#    - export CXX="g++-7"
#    - DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake .. -DCMAKE_CXX_STANDARD=17
#    - cmake --build .
#    - ctest --output-on-failure

#g++-8:
#  stage: test
#  image: vistart/cuda:10.2-ubuntu20.04
#  script:
#    - export CXX="g++-8"
#    - DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake ..
#    - cmake --build .
#    - ctest --output-on-failure

#g++-9:
#  stage: test
#  script:
#    - export CXX="g++-9"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake ..
#    - cmake --build . --verbose
#    - ctest --output-on-failure

#g++-9-std17:
#  stage: test
#  script:
#    - export CXX="g++-9"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake .. -DCMAKE_CXX_STANDARD=17
#    - cmake --build . --verbose
#    - ctest --output-on-failure

#g++-9-openblas:
#  stage: test
#  script:
#    - export CXX="g++-9"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libopenblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake ..
#    - cmake --build . --verbose
#    - ctest --output-on-failure

g++-openblas:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libopenblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose
    - ctest --output-on-failure

memcheck:
  stage: test
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX valgrind pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose
    - ctest --overwrite MemoryCheckCommandOptions="--leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=666" -T memcheck --output-on-failure

clang++-9:
  image: debian:stable
  stage: test
  image: debian:stable
  script:
    - export CXX="clang++-9"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose
    - ctest --output-on-failure

clang++-9-std17:
  image: debian:stable
  stage: test
  image: debian:stable
  script:
    - export CXX="clang++-9"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_STANDARD=17
    - cmake --build . --verbose
    - ctest --output-on-failure

clang++-9-asan:
  image: debian:stable
  stage: test
  image: debian:stable
  script:
    - export CXX="clang++-9"
    - export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-9/bin/llvm-symbolizer
    - export CXXFLAGS="-fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-9 llvm-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev llvm
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - export ASAN_OPTIONS="halt_on_error=1 detect_leaks=1"
    - ctest --output-on-failure

# clang 10 and clang 11 have a bug when compiling in c++17 mode
clang++:
  stage: test
  script:
    - export CXX="clang++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

clang++-tidy:
  stage: test
  script:
    - export CXX="clang++"
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang clang-tidy pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libblas-dev liblapack-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - clang-tidy --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*,-readability-magic-numbers,-modernize-use-nodiscard,-altera-struct-pack-align,-cert-err58-cpp,-cppcoreguidelines-avoid-non-const-global-variables,-cppcoreguidelines-macro-usage,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-type-vararg,-cppcoreguidelines-avoid-magic-numbers,-fuchsia-default-arguments-calls,-fuchsia-trailing-return,-fuchsia-statically-constructed-objects,-fuchsia-overloaded-operator,-hicpp-vararg,-hicpp-no-array-decay,-llvm-header-guard,-llvmlibc-restrict-system-libc-headers,-llvmlibc-implementation-in-namespace,-llvmlibc-callee-namespace,-fuchsia-default-arguments-calls"
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

g++-cpplint:
  stage: test
  script:
    - export CXX="g++"
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libblas-dev liblapack-dev libfftw3-dev python3-pip
    - pip install cpplint
    - ln --symbolic --force . ../multi
    - $CXX --version
    - cpplint --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_CPPLINT="cpplint;--filter=-whitespace/tab,-whitespace/parens,-whitespace/operators,-readability/alt_tokens,-build/include_order,-whitespace/line_length,-whitespace/semicolon,-legal/copyright,-whitespace/comments,-readability/nolint"
    - cmake --build . --verbose -- --quiet --no-print-directory
    - cpplint --filter=-whitespace/line_length,-whitespace/parens,-whitespace/tab,-readability/alt_tokens,-readability/nolint,-runtime/references,-build/include_order,-build/header_guar,-legal/copyright ../array.hpp

clang++-std17:
  stage: test
  script:
    - export CXX="clang++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_STANDARD=17
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

clang++-11:
  stage: test
  script:
    - export CXX="clang++-11"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-11 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

clang++-11-gcc9:
  stage: test
  image: vistart/cuda:10.2-ubuntu20.04
  script:
    - export CXX="clang++-11"
    - apt-get update 
    - DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y --quiet gcc-9 clang-11 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX -v
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

clang++-11-std17:
  stage: test
  script:
    - export CXX="clang++-11"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-11 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_STANDARD=17
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

#icc:
#    image: meteocima/dkr-intel
#    stage: test
#    script:
#      - . /opt/intel/bin/compilervars.sh intel64
#      - export CXX="icpc"
#      - apt-get update && apt-get install --no-install-recommends -y --quiet cmake make libboost-test-dev libblas-dev liblapack-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - $CXX -v
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -- --quiet --no-print-directory
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure

#icc-nomkl:
#    image: meteocima/dkr-intel
#    stage: test
#    script:
#      - export CXX="/opt/intel/bin/icpc"
#      - apt-get update && apt-get install --no-install-recommends -y --quiet cmake make libboost-test-dev libblas-dev liblapack-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - $CXX -v
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -- --quiet --no-print-directory
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure
#      
#icc-memcheck:
#    image: meteocima/dkr-intel
#    stage: test
#    script:
#      - . /opt/intel/bin/compilervars.sh intel64
#      - export CXX="icpc"
#      - apt-get update && apt-get install --no-install-recommends -y --quiet cmake make valgrind libboost-test-dev libblas-dev liblapack-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - $CXX -v
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DMEMORYCHECK_COMMAND_OPTIONS="--leak-check=full --show-reachable=yes --track-origins=yes --malloc-fill=0xEE --free-fill=0xFF --leak-check-heuristics=none -v --track-fds=yes --error-limit=no --show-below-main=yes --read-var-info=yes --gen-suppressions=all"
#      - cmake --build . -- --quiet --no-print-directory
#      - export MKL_VERBOSE=1
#      - ctest -T memcheck --output-on-failure || (cat Testing/Temporary/MemoryChecker.*.log && exit 0)

#icc-std17:
#    image: meteocima/dkr-intel
#    stage: test
#    script:
#      - . /opt/intel/bin/compilervars.sh intel64
#      - export CXX="icpc"
#      - apt-get update && apt-get install --no-install-recommends -y --quiet cmake make libboost-test-dev libblas-dev liblapack-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - $CXX -v
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_CXX_STANDARD=17 -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -- --quiet --no-print-directory
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure

cuda-10.0:
    image: vistart/cuda:10.2-ubuntu20.04
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet gcc-8 g++-8 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - g++-8 --version
      - cd test
      - mkdir build && cd build
      - cmake -DENABLE_CUDA=1 -DCMAKE_CUDA_FLAGS="-ccbin=g++-8" ..
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.0:
    image: nvidia/cuda:11.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.1:
    image: nvidia/cuda:11.1-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.0-std17:
    image: nvidia/cuda:11.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.1-std17:
    image: nvidia/cuda:11.1-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.2-std14:
    image: nvidia/cuda:11.2.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=14 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.2-std17:
    image: nvidia/cuda:11.2.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.3-std17:
    image: nvidia/cuda:11.3.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

cuda-11.4-std17:
    image: nvidia/cuda:11.4.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
      - ln --symbolic --force . ../multi
      - nvcc --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
      - cmake --build . --verbose
      - ctest --output-on-failure

#cuda-11.5-std17:
#    image: nvidia/cuda:11.5.0-devel
#    stage: test
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

g++-cppcheck:
  stage: test
  image: debian:stable
  script:
    - export CXX="g++"
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev liblapack-dev libfftw3-dev cppcheck
    - ln --symbolic --force . ../multi
    - $CXX --version
    - cppcheck --version
    - find . -name '*.hpp' -exec cppcheck --enable=all --inline-suppr --suppress=unmatchedSuppression --suppress=syntaxError --suppress=missingInclude --suppress=missingIncludeSystem --suppress=preprocessorErrorDirective --suppress=syntaxError --suppress=unusedFunction --suppress=arithOperationsOnVoidPointer --suppress=sizeofDereferencedVoidPointer --suppress=sizeofDereferencedVoidPointer --suppress=unmatchedSuppression:{} -D__align__ -DCUDARTAPI --language=c++ --std=c++17 --error-exitcode=666 -UEXCLUDE_CPPCHECK --verbose --exception-handling {} \;
    - mkdir build && cd build
    - cmake -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--inline-suppr;--suppress=missingIncludeSystem;--suppressions-list=${PWD}/../.cppcheck-suppressions;--language=c++;--std=c++17;--error-exitcode=666;-UEXCLUDE_CPPCHECK;--verbose;--exception-handling" ..
    - cmake --build . --verbose
    - ctest --output-on-failure
  allow_failure: true

qmcpack-g++:
  stage: test
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config cmake make git ca-certificates numdiff python3 python3-numpy python3-h5py python3-mpi4py python3-scipy libxml2-dev libhdf5-dev
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cp -r qmcpack qmcpack.noupdate
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - echo $CI_REPOSITORY_URL
    - echo $CI_COMMIT_BRANCH
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd ../qmcpack.noupdate
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
    - cd ../../qmcpack
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure

qmcpack-cuda-11.2-compileonly:
    image: nvidia/cuda:11.2.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get -qq update && apt-get -qq install --no-install-recommends -y libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config cmake make git ca-certificates numdiff python3 python3-numpy python3-h5py python3-mpi4py python3-scipy libxml2-dev libhdf5-dev wget
      - wget https://cmake.org/files/v3.21/cmake-3.21.3-linux-x86_64.sh --no-verbose # following https://askubuntu.com/a/865294/15943
      - mkdir /opt/cmake
      - sh cmake-3.21.3-linux-x86_64.sh --skip-license --prefix=/opt/cmake
      - ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
      - cmake --version
      - git clone https://github.com/QMCPACK/qmcpack.git
      - cd qmcpack
      - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
      - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
      - echo $CI_REPOSITORY_URL
      - echo $CI_COMMIT_BRANCH
      - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
      - cd build
      - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 ..
      - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
      - ctest -R ppconvert --output-on-failure

qmcpack-icpc-runner:
  stage: test
  tags:
    - intel_compiler
  script:
    - . /opt/intel/oneapi/setvars.sh
    - export CXX="icpc"
    - $CXX --version
    - cmake --version
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - echo $CI_REPOSITORY_URL
    - echo $CI_COMMIT_BRANCH
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git master
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpiicc -DCMAKE_CXX_COMPILER=mpiicpc -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 ..
    - make -j 16 ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure

inq-g++-latest:
  stage: test
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-filesystem-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config pkg-config cmake make git ca-certificates
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - cd external_libs/multi
    - git fetch
    - git checkout $CI_COMMIT_BRANCH
    - cd ../..
    - mkdir build && cd build
    - ../configure --prefix=$HOME
    - make
    - make install
    - ctest --output-on-failure

inq-cuda-11.4-compileonly:
    image: nvidia/cuda:11.4.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-filesystem-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config pkg-config cmake make git ca-certificates
      - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
      - cd inq
      - cd external_libs/multi
      - git fetch
      - git checkout $CI_COMMIT_BRANCH
      - cd ../..
      - mkdir build && cd build
      - /usr/local/cuda/bin/nvcc -V
      - CUDACXX=/usr/local/cuda/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --with-cuda-prefix=/usr/local/cuda --pass-thru -DCMAKE_CUDA_ARCHITECTURES=70
      - make silicon

g++-codecov-runner:
    stage: test
    tags:
      - intel_compiler
    script:
      - export CXX="g++"
      - $CXX --version
      - mkdir build && cd build
      - cmake --version
      - CXXFLAGS="-ftest-coverage -fprofile-arcs --coverage" cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_EXE_LINKER_FLAGS="-lgcov --coverage"
      - cmake --build . -j 12
      - ctest --output-on-failure -T Test -T Coverage #      - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
      - lcov --directory . --capture --output-file coverage.info
      - lcov --remove coverage.info '/usr/*' --output-file coverage.info 
      - lcov --list coverage.info
      - bash <(curl -s https://codecov.io/bash) -t 999feb5b-a599-4d02-b9c5-46d977247f3a || echo "Codecov did not collect coverage reports"

icpc-nomkl-runner:
    stage: test
    tags:
      - intel_compiler
    script:
      - export CXX="/opt/intel/oneapi/compiler/2021.2.0/linux/bin/intel64/icpc"
      - $CXX --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
      - cmake --build . -j 12
      - export MKL_VERBOSE=1
      - ctest --output-on-failure

icpc-runner: # image: intel/oneapi-basekit
    stage: test
    tags:
      - intel_compiler
    script:
      - . /opt/intel/oneapi/setvars.sh
      - export CXX="icpc"
      - $CXX --version
      - mkdir build && cd build
      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
      - cmake --build . -j 12
      - export MKL_VERBOSE=1
      - ctest --output-on-failure

nvcc-runner: # image: intel/oneapi-basekit
    stage: test
    tags:
      - intel_compiler
    script:
      - mkdir build && cd build
      - /usr/local/cuda/bin/nvcc --version
      - CUDACXX=/usr/local/cuda/bin/nvcc CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda cmake .. -DCMAKE_CXX_STANDARD=17
      - cmake --build . -j 12
      - ctest -j 12 --output-on-failure

#oneapi: # WARNING: Failed to pull image with policy "always": failed to register layer: Error processing tar file(exit status 1): write /opt/intel/oneapi/mkl/2021.1-beta08/lib/intel64/libmkl_pgi_thread.a: no space left on device (manager.go:205:310s)
#    image: intel/oneapi
#    stage: test
#    script:
#        - . /opt/intel/oneapi/setvars.sh
#        - export CXX="icpc"
#        - apt-get update && apt-get install --no-install-recommends -y --quiet cmake make libboost-test-dev libblas-dev liblapack-dev libfftw3-dev
#        - ln --symbolic --force . ../multi
#        - $CXX -v
#        - mkdir build && cd build
#        - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#        - cmake --build . -- --quiet --no-print-directory
#        - export MKL_VERBOSE=1
#        - ctest --output-on-failure

#icpc-memcheck-runner:
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - . /opt/intel/system_studio_2020/bin/compilervars.sh intel64
#      - export CXX="icpc"
#      - $CXX --version
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -j 12
#      - ctest -T memcheck --output-on-failure || (cat Testing/Temporary/MemoryChecker.*.log && exit 0)

#icpc-std17-runner:
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - . /opt/intel/system_studio_2020/bin/compilervars.sh intel64
#      - export CXX="icpc"
#      - $CXX --version
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_CXX_STANDARD=17 -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -j 12
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure

inq-nvcc-ompi:
  stage: test
  tags:
    - intel_compiler
  script:
    - export PREFIX=`mktemp -d`
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - cd external_libs/multi
    - git checkout $CI_COMMIT_BRANCH
    - cd ../..
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc -V
    - CUDACXX=/usr/local/cuda/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --disable-debug `#--with-cuda-prefix=/usr/local/cuda --pass-thru -DCMAKE_CUDA_ARCHITECTURES=70`
    - make -j8
    - make -j4 install
    - ctest --output-on-failure --timeout 600
    - cd src; INQ_EXEC_ENV="mpirun --oversubscribe -np 4" ctest --output-on-failure --timeout 600; cd ..
    - rm -rf $PREFIX

#blas&fft:
#    stage: test
#    script:
#      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
#      - apt update --quiet
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -f-assume-yes --quiet libboost-test-dev libboost-timer-dev libtbb-dev libboost-serialization-dev libboost-iostreams-dev librange-v3-dev valgrind
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang pkg-config libblas-dev libblas64-dev libfftw3-dev nvidia-cuda-toolkit
#      - ln --symbolic --force . ../multi
#      - export CXXX="clang++ -x c++"
#      - export CXXFLAGS="-Wall -Wextra -Wpedantic -O3 -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas`"
#      - export CXX="${CXXX} ${CXXFLAGS}"
#      - $CXX --version
#      - cd adaptors/blas
#      - for a in ./*.hpp; do echo $a; $CXX $a || exit; done;
#      - cd tests
#      - for a in ./*.cpp; do echo $a; $CXX $a || exit; done;
#      - cd ..
#      - cd ../..
#      - cd adaptors
#      - sh ./fftw.hpp
#      - $CXX fft.hpp

#blas&fftGPU-11:
#    stage: build
#    tags:
#      - cuda_gpu
#    stage: test
#    script:
#      - export PATH=/usr/local/cuda-11.0/bin:$PATH #export PATH=/usr/local/cuda/bin:$PATH
#      - export LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64:$LD_LIBRARY_PATH
#      - export CXXX="clang++ -x c++"
#      - export CXXFLAGS="`#-Wall -Wextra -Wpedantic` -Ofast -Wl,-rpath=/usr/local/cuda/lib64 -L/usr/local/cuda-11.0/lib64 -I/usr/local/cuda-11.0/include -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas` "
#      - export CXX="${CXXX} ${CXXFLAGS}"
#      - $CXX --version
#      - cd adaptors/blas
#      - for a in ./*.hpp; do echo $a; sh $a || exit; echo "\n"; done;
#      - cd tests
#      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;
#      - cd ..
#      - cd ../..
#      - cd adaptors
#      - sh ./fftw.hpp
#      - sh ./fft.hpp

#blas&fftGPU:
#    stage: build
#    tags:
#      - cuda_gpu
#    stage: test
#    script:
#      - export PATH=/usr/local/cuda/bin:$PATH #export PATH=/usr/local/cuda/bin:$PATH
#      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
#      - export CXXX="clang++ -x c++"
#      - export CXXFLAGS="`#-Wall -Wextra -Wpedantic` -Ofast -Wl,-rpath=/usr/local/cuda/lib64 -L/usr/local/cuda/lib64 -I/usr/local/cuda/include -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas` "
#      - export CXX="${CXXX} ${CXXFLAGS}"
#      - $CXX --version
#      - cd adaptors/blas
#      - for a in ./*.hpp; do echo $a; sh $a || exit; echo "\n"; done;
#      - cd tests
#      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;
#      - cd ..
#      - cd ../..
#      - cd adaptors
#      - sh ./fftw.hpp
#      - sh ./fft.hpp

