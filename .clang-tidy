# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:2;autowrap:nil;-*-

WarningsAsErrors: '*'
HeaderFilterRegex: '.'
FormatStyle: file

CheckOptions:
  - { key: readability-identifier-naming.ClassCase,             value: lower_case }
  - { key: readability-identifier-naming.FunctionCase,          value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantCase,    value: aNy_CasE   }
  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: ''         }
  - { key: readability-identifier-naming.PrivateMemberSufix,    value: _          }
  - { key: readability-identifier-naming.StructCase,            value: lower_case }
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase  }

# - { key: readability-identifier-naming.VariableCase,          value: aNy_CasE   } for tests
# - { key: readability-identifier-naming.PrivateMethodSuffix,   value:            }
# TODO(correaa) make private method suffix _

Checks: '*,
  -altera-id-dependent-backward-branch,
  -altera-struct-pack-align,
  -altera-unroll-loops,
  -cert-err58-cpp,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-type-vararg,
  -fuchsia-default-arguments-calls,
  -fuchsia-overloaded-operator,
  -fuchsia-statically-constructed-objects,
  -fuchsia-trailing-return,
  -hicpp-vararg,
  -hicpp-no-array-decay,
  -llvmlibc-callee-namespace,
  -llvmlibc-implementation-in-namespace,
  -llvmlibc-restrict-system-libc-headers,
  -modernize-use-nodiscard,
  -readability-magic-numbers
'

#  -altera-id-dependent-backward-branch,                  // seems like a buggy warning https://github.com/llvm/llvm-project/issues/52790
#  -altera-struct-pack-align,                             // this asks to use non-standard pragmas such as __attribute__((aligned(0))) and _attribute__((packed)), may interfeere with gcc/nvcc compatibility?
#  -altera-unroll-loops,                                  // BOOST_REQUIRE macro requires this
#  -cert-err58-cpp,                                       // BOOST_AUTO_TEST_CASE macro requires this
#  -cppcoreguidelines-avoid-magic-numbers,                // all tests use magic numbers
#  -cppcoreguidelines-avoid-non-const-global-variables,   // BOOST_AUTO_TEST_CASE macros require this
#  -cppcoreguidelines-macro-usage,                        // BOOST_TEST_MODULE macro requires this
#  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,  // assert macros need this
#  -cppcoreguidelines-pro-type-vararg,                    // BOOST_REQUIRE macros require this
#  -fuchsia-default-arguments-calls,                      // BOOST_REQUIRE macros require this
#  -fuchsia-overloaded-operator,                          // this library overloads operators (==, >, +)
#  -fuchsia-statically-constructed-objects,               // BOOST_AUTO_TEST_CASE creates these
#  -fuchsia-trailing-return,                              // to allow any '-> decltype(auto)'
#  -hicpp-vararg,                                         // all BOOST_TEST_REQUIRE macros require this
#  -hicpp-no-array-decay,                                 // all assert macros require this
#  -llvmlibc-implementation-in-namespace,                 // nonsense warning
#  -llvmlibc-callee-namespace,                            // nonsense warning
#  -llvmlibc-restrict-system-libc-headers,                // nonsense warning
#  -modernize-use-nodiscard,                              // this would add [[nodiscard]] to almost all functions, adding a lot of noise
#  -readability-magic-numbers,                            // all tests use magic numbers

