//////////////////////////////////////////////////////////////////////
// This file is distributed under the University of Illinois/NCSA Open Source
// License.  See LICENSE file in top directory for details.
//
// Copyright (c) 2016 Jeongnim Kim and QMCPACK developers.
//
// File developed by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
//
// File created by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <tuple>

#include "AFQMC/config.h"
#include "AFQMC/Propagators/generate1BodyPropagator.hpp"
#include "AFQMC/Propagators/WalkerUpdate.hpp"
#include "AFQMC/Walkers/WalkerConfig.hpp"

namespace qmcplusplus
{

namespace afqmc
{

/*
 * Propagates the walker population nsteps forward with a fixed vbias (from the initial 
 * configuration).   
 */
template<class WlkSet>
void AFQMCSharedPropagator::step(int nsteps_, WlkSet& wset, RealType Eshift, RealType dt) 
{

  auto walker_type = wset.getWalkerType();
  size_t nsteps= size_t(nsteps_);
  size_t nwalk = wset.size();
  RealType sqrtdt = std::sqrt(dt);  
  size_t Gsize = wfn.size_of_G_for_vbias();
  size_t localnCV = wfn.local_number_of_cholesky_vectors();
  // if transposed_XXX_=true  --> XXX[nwalk][...], 
  // if transposed_XXX_=false --> XXX[...][nwalk]
  int vhs_nr = NMO*NMO, vhs_nc = nwalk*nsteps;
  if(transposed_vHS_) std::swap(vhs_nr,vhs_nc);
  int vhs3d_n1 = NMO, vhs3d_n2 = NMO, vhs3d_n3 = nwalk*nsteps;
  if(transposed_vHS_) {
    vhs3d_n1 = nwalk*nsteps;
    vhs3d_n2 = vhs3d_n3 = NMO; 
  }  
  int G_nr = Gsize, G_nc = nwalk;
  if(transposed_G_) std::swap(G_nr,G_nc);

  //  Shared buffer used for:
  //  G_for_vbias:     [ Gsize * nwalk ]
  //  vbias:           [ localnCV * nwalk ]
  //  X:               [ localnCV * nwalk * nstep ]
  //  vHS:             [ NMO*NMO * nwalk * nstep ]      
  // memory_needs: nwalk * ( 2*nsteps + Gsize + localnCV*(nstep+1) + NMO*NMO*nstep )
  size_t memory_needs = nwalk * ( Gsize + localnCV*(nsteps+1) + NMO*NMO*nsteps );

  // 0. Allocate memory and set shared memory structures
  if(not shmbuff || shmbuff->size() < memory_needs ) {
    shmbuff.reset(); // destroy current SHM_Buffer in case it is large
    shmbuff = std::move(std::make_unique<SHM_Buffer>(TG.TG_local(),memory_needs));  
  }  
  size_t displ=0;
  // Mixed Density Matrix for walkers at original configuration
  // Actual dimensions depend on transposed_G_, see above
  CMatrix_ref G(shmbuff->data()+displ, extents[G_nr][G_nc]); 
    displ+=G_nr*G_nc; 
  // vias potential for walkers at original configuration
  CMatrix_ref vbias(shmbuff->data()+displ, extents[localnCV][nwalk]); 
    displ+=localnCV*nwalk;
  // right hand side matrix in calculation of HS potential for all steps: ~ sigma + (vbias-vMF)
  // The same vbias is used in all steps
  CMatrix_ref X(shmbuff->data()+displ, extents[localnCV][nwalk*nsteps]); 
    displ+=localnCV*nwalk*nsteps;
  // HS potential for all steps.
  // Actual dimensions depend on transposed_vHS_, see above
  CMatrix_ref vHS(shmbuff->data()+displ, extents[vhs_nr][vhs_nc]); 
  // second view of vHS matrix for use in propagation step
  // Actual dimensions depend on transposed_vHS_, see above
  boost::multi_array_ref<ComplexType,3> vHS3D(shmbuff->data()+displ, 
                                              extents[vhs3d_n1][vhs3d_n2][vhs3d_n3]); 

  // local matrices for temporary accumulation
  if(MFfactor.shape()[0] != nsteps || MFfactor.shape()[1] != nwalk) 
    MFfactor.resize(extents[nsteps][nwalk]);
  if(hybrid_weight.shape()[0] != nsteps || hybrid_weight.shape()[1] != nwalk) 
    hybrid_weight.resize(extents[nsteps][nwalk]);
  if(new_overlaps.shape()[0] != nwalk) new_overlaps.resize(extents[nwalk]);
  if(new_energies.shape()[0] != nwalk || new_energies.shape()[1] != 3) 
    new_energies.resize(extents[nwalk][3]);
  // these is only needed if vHS matrix has strides != 1, e.g. when transposed_vHS_ == false  
  if(not transposed_vHS_) {
    if(walker_type==NONCOLLINEAR)
      if(local_vHS.shape()[0] != 2*NMO || local_vHS.shape()[1] != 2*NMO)
        local_vHS.resize(extents[2*NMO][2*NMO]);
    else
      if(local_vHS.shape()[0] != NMO || local_vHS.shape()[1] != NMO)
        local_vHS.resize(extents[NMO][NMO]);
  }  

  // if timestep changed, recalculate one body propagator
  if( std::abs(dt-old_dt) > 1e-6 ) {
    old_dt = dt;
    P1 = std::move(generate1BodyPropagator(TG,1e-8,dt,H1)); 
  }
  // 1. Calculate Green function for all walkers
  AFQMCTimers[G_for_vbias_timer]->start();
  wfn.MixedDensityMatrix_for_vbias(wset,G);
  AFQMCTimers[G_for_vbias_timer]->stop();

  // 2. Calculate vbias for initial configuration
  AFQMCTimers[vbias_timer]->start();
  if (free_projection) {
    std::fill_n(vbias.origin(), localnCV*nwalk, ComplexType(0.0,0.0));
  } else {
    wfn.vbias(G,vbias,sqrtdt);
  }
  AFQMCTimers[vbias_timer]->stop();

  // 3. Assemble X(nCV,nsteps,nwalk)
  assemble_X(nsteps,nwalk,sqrtdt,X,vbias,MFfactor,hybrid_weight);
  TG.TG_local().all_reduce_in_place_n(MFfactor.origin(),MFfactor.num_elements(),std::plus<>());  
  TG.TG_local().all_reduce_in_place_n(hybrid_weight.origin(),hybrid_weight.num_elements(),
                                      std::plus<>());  

  // 4. Calculate vHS(M*M,nsteps,nwalk)/vHS(nsteps,nwalk,M*M)
  AFQMCTimers[vHS_timer]->start();
  wfn.vHS(X,vHS,sqrtdt);
  AFQMCTimers[vHS_timer]->stop();

  int nx = 1;
  if(walker_type == COLLINEAR) nx=2;

  // from now on, individual work on each walker/step
  const int ntasks_per_core = int(nx*nwalk)/TG.getNCoresPerTG();
  const int ntasks_total_serial = ntasks_per_core*TG.getNCoresPerTG();
  const int nextra = int(nx*nwalk) - ntasks_total_serial;

  // each processor does ntasks_percore_serial overlaps serially
  const int tk0 = TG.getLocalTGRank()*ntasks_per_core;
  const int tkN = (TG.getLocalTGRank()+1)*ntasks_per_core;

  // make new communicator if nextra changed from last setting
  reset_nextra(nextra);

  for(int ni=0; ni<nsteps_; ni++) {

    // 5. Propagate walkers
    AFQMCTimers[propagate_timer]->start();
    if (wset.getNBackProp() > 0) {
      apply_propagators_construct_propagator(wset,ni,tk0,tkN,ntasks_total_serial,vHS3D);
    } else {
      apply_propagators(wset,ni,tk0,tkN,ntasks_total_serial,vHS3D);
    }
    AFQMCTimers[propagate_timer]->stop();

    // 6. Calculate local energy/overlap
    AFQMCTimers[pseudo_energy_timer]->start();
    if(hybrid) {
      wfn.Overlap(wset,new_overlaps);
    } else {
      wfn.Energy(wset,new_energies,new_overlaps);
    }
    TG.local_barrier();
    AFQMCTimers[pseudo_energy_timer]->stop();

    // 7. update weights/energy/etc, apply constrains/bounds/etc 
    // simple round-robin
    for(int iw=0; iw<nwalk; ++iw) { 
      if(iw%TG.TG_local().size() == TG.TG_local().rank()) { 
        if(free_projection) { 
          free_projection_walker_update(wset[iw],dt,new_overlaps[iw],
                           MFfactor[ni][iw],Eshift,hybrid_weight[ni][iw]);
        } else if(hybrid) {
          hybrid_walker_update(wset[iw],dt,apply_constrain,importance_sampling,
                           Eshift,new_overlaps[iw],MFfactor[ni][iw],hybrid_weight[ni][iw]);
        } else {
          local_energy_walker_update(wset[iw],dt,apply_constrain,Eshift,
                                     new_overlaps[iw],new_energies[iw],
                                     MFfactor[ni][iw],hybrid_weight[ni][iw]);
        }
      }
    }
  }  
  TG.local_barrier();
}

template<class WSet>
void AFQMCSharedPropagator::apply_propagators(WSet& wset, int ni, int tk0, int tkN, 
                                              int ntasks_total_serial,
                                              boost::multi_array_ref<ComplexType,3>& vHS3D)
{  
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    if(walker_type == COLLINEAR) {
      // in this case, tk corresponds to 2x the walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(tk%2==0)
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
        else
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Beta),P1,vHS3D[nt],order);
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        if(tk%2==0)
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,vHS3D[nt],local_group_comm,order);
        else
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Beta),P1,vHS3D[nt],local_group_comm,order);
      }
    } else {
      // in this case, tk corresponds to walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        SDetOp.Propagate(wset[tk].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,vHS3D[nt],local_group_comm,order);
      }
    }
  } else {  
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    if(walker_type == COLLINEAR) {
      int oldw=-1;
      // in this case, tk corresponds to 2x the walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(oldw != tk/2) { 
          local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
          oldw=tk/2;
        }
        if(tk%2==0)
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,local_vHS,order);
        else
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Beta),P1,local_vHS,order);
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        if(tk%2==0)
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,local_vHS,local_group_comm,order);
        else
          SDetOp.Propagate(wset[tk/2].SlaterMatrix(Beta),P1,local_vHS,local_group_comm,order);
      }
    } else {
      // in this case, tk corresponds to walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        SDetOp.Propagate(wset[tk].SlaterMatrix(Alpha),P1,local_vHS,order);
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,local_vHS,local_group_comm,order);
      }
    }
  }
  TG.local_barrier();
}

template<class WSet>
void AFQMCSharedPropagator::apply_propagators_construct_propagator(WSet& wset, int ni, int tk0, int tkN,
                                                                   int ntasks_total_serial,
                                                                   boost::multi_array_ref<ComplexType,3>& vHS3D)
{
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    if(walker_type == COLLINEAR) {
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, extents[NMO][NAEB]);
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, extents[NMO][NAEB]);
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        CMatrix_ref B = wset[tk].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        CMatrix_ref B = wset[iw].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
      }
    }
  } else {
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    if(walker_type == COLLINEAR) {
      int oldw=-1;
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(oldw != tk/2) {
          local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
          oldw=tk/2;
        }
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, extents[NMO][NAEB]);
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, extents[NMO][NAEB]);
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        CMatrix_ref B = wset[tk].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        local_vHS = vHS3D[indices[range_t()][range_t()][nt]];
        CMatrix_ref B = wset[iw].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), extents[NMO][NAEA]);
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
        wset[iw].incrementBMatrix();
      }
    }
  }
  TG.local_barrier();
}

}

}

