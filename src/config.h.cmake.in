/* src/ohmms-config.h.in.  Generated from configure.in by autoheader.  */
// -*- c++  -*-
//
//Ohmms Configuration Header. Automatically Generated
//
//See the LICENSE file in the top-level directory for copyright notices
//
#ifndef QMCPLUSPLUS_CONFIGURATION_H
#define QMCPLUSPLUS_CONFIGURATION_H

/* define the major version */
#define QMCPACK_VERSION_MAJOR  @QMCPACK_VERSION_MAJOR@

/* define the minor version */
#define QMCPACK_VERSION_MINOR  @QMCPACK_VERSION_MINOR@

/* define the patch version */
#define QMCPACK_VERSION_PATCH  @QMCPACK_VERSION_PATCH@

/* define the release version */
#cmakedefine QMCPACK_RELEASE  @QMCAPCK_RELEASE@

/* define the git last commit date */
// #cmakedefine QMCPLUSPLUS_LAST_CHANGED_DATE  "@QMCPLUSPLUS_LAST_CHANGED_DATE@"

/* building from Git repository or not */
#cmakedefine IS_GIT_PROJECT  @IS_GIT_PROJECT@

/* define QMC_BUILD_SANDBOX_ONLY */
#cmakedefine QMC_BUILD_SANDBOX_ONLY @QMC_BUILD_SANDBOX_ONLY@

/* define PRINT_DEBUG */
#cmakedefine PRINT_DEBUG @PRINT_DEBUG@

/* Enable OpenMP parallelization. */
#cmakedefine ENABLE_OPENMP @ENABLE_OPENMP@

/* Enable OpenMP offload. */
#cmakedefine ENABLE_OFFLOAD @ENABLE_OFFLOAD@

#ifdef ENABLE_OFFLOAD
  #define PRAGMA_OFFLOAD(x) _Pragma(x)
#else
  #define PRAGMA_OFFLOAD(x)
#endif

/* Define to 1 if you have the `hdf5' library (-lhdf5). */
#cmakedefine HAVE_LIBHDF5 @HAVE_LIBHDF5@

/* Define to 1 if you want to use parallel hdf5 for frequent output */
#cmakedefine ENABLE_PHDF5 @ENABLE_PHDF5@

/* Define to 1 if you have the `boost' library */
#cmakedefine HAVE_LIBBOOST @HAVE_LIBBOOST@

/* Define to 1 if you have the `sprng' library (-lsprng). */
#cmakedefine HAVE_LIBSPRNG @HAVE_LIBSPRNG@

/* Define to 1 if you have the `blitz' library */
#cmakedefine HAVE_LIBBLITZ @HAVE_LIBBLITZ@

/* Define to 1 if you have libxml2 */
#cmakedefine HAVE_LIBXML2 @HAVE_LIBXML2@

/* Define to 1 if you have fftw */
#cmakedefine HAVE_LIBFFTW @HAVE_LIBFFTW@

/* Define to 1 if you have libxml++ */
#cmakedefine HAVE_LIBXMLPP @HAVE_LIBXMLPP@

/* Define to 1 if you have gsl */
#cmakedefine HAVE_LIBGSL @HAVE_LIBGSL@

/* Define to 1 if you have MPI library */
#cmakedefine HAVE_MPI @HAVE_MPI@

/* Define the physical dimension of appliation. */
#cmakedefine OHMMS_DIM @OHMMS_DIM@

/* Define the index type: int, long */
#cmakedefine OHMMS_INDEXTYPE @OHMMS_INDEXTYPE@

/* Define the base precision: float, double */
#cmakedefine OHMMS_PRECISION @OHMMS_PRECISION@

/* Define the full precision: double, long double */
#cmakedefine OHMMS_PRECISION_FULL @OHMMS_PRECISION_FULL@

/* Define to 1 if precision is mixed, only for the CPU code */
#cmakedefine MIXED_PRECISION @MIXED_PRECISION@

/* Define to 1 if precision is mixed, only for AFQMC code */
#cmakedefine AFQMC_MIXED_PRECISION @AFQMC_MIXED_PRECISION@

/* Define to 1 if complex wavefunctions are used */
#cmakedefine QMC_COMPLEX @QMC_COMPLEX@

/* Define if sincos function exists */
#cmakedefine HAVE_SINCOS @HAVE_SINCOS@

/* Define if einspline lib exists */
#cmakedefine HAVE_EINSPLINE @HAVE_EINSPLINE@

/* Define if external einspline is found */
#cmakedefine HAVE_EINSPLINE_EXT @HAVE_EINSPLINE_EXT@

#ifndef HAVE_EINSPLINE_EXT

/* Define if posix_memalign function exists */
#cmakedefine HAVE_POSIX_MEMALIGN @HAVE_POSIX_MEMALIGN@

/* Define if dlfcn.h exists */
#cmakedefine HAVE_DLFCN_H @HAVE_DLFCN_H@

/* Define if inttypes.h exists */
#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@

/* Define if memory.h exists */
#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@

/* Define if pmmintrin.h exists */
#cmakedefine HAVE_PMMINTRIN_H @HAVE_PMMINTRIN_H@

/* Define if emmintrin.h exists */
#cmakedefine HAVE_EMMINTRIN_H @HAVE_EMMINTRIN_H@

/* Define if sys/stat.h exists */
#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@

/* Define if sys/time.h exists */
#cmakedefine HAVE_SYS_TIME_H @HAVE_SYS_TIME_H@

/* Define if sys/types.h exists */
#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@

/* Define if unistd.h exists */
#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@

#endif /* HAVE_EINSPLINE_EXT */

/* Find mkl library */
#cmakedefine HAVE_MKL @HAVE_MKL@

/* Find mkl/vml library */
#cmakedefine HAVE_MKL_VML @HAVE_MKL_VML@

/* Find essl library */
#cmakedefine HAVE_ESSL @HAVE_ESSL@

/* Fund acml library */
#cmakedefine HAVE_ACML @HAVE_ACML@

/* Using CUDA for GPU execution */
#cmakedefine QMC_CUDA @QMC_CUDA@

/* Using CUDA for GPU execution, next generation */
#cmakedefine ENABLE_CUDA @ENABLE_CUDA@

/* Setting base precision for CUDA kernels */
#cmakedefine CUDA_PRECISION @CUDA_PRECISION@

/* Setting full precision for CUDA kernels */
#cmakedefine CUDA_PRECISION_FULL @CUDA_PRECISION_FULL@

/* For AFQMC compilation  */
#cmakedefine BUILD_AFQMC @BUILD_AFQMC@

/* For FCIQMC compilation  */
#cmakedefine BUILD_FCIQMC @BUILD_FCIQMC@

#cmakedefine DEBUG_PSIBUFFER_ON @DEBUG_PSIBUFFER_ON@

/* Disable trace manager and associated features */
#cmakedefine DISABLE_TRACEMANAGER @DISABLE_TRACEMANAGER@

/* Fully remove trace manager and associated features */
#cmakedefine REMOVE_TRACEMANAGER @REMOVE_TRACEMANAGER@

/* Use SOA version of AA distance table */
#cmakedefine ENABLE_SOA  @ENABLE_SOA@

#if defined(__cplusplus)
  #if defined(__INTEL_COMPILER)
    #if defined(__AVX512F__)
      #define QMC_CLINE 64
      #define QMC_ALIGNAS alignas(64)
      #define ASSUME_ALIGNED(x) __assume_aligned(x,64)
    #else
      #define QMC_CLINE 32
      #define QMC_ALIGNAS alignas(32)
      #define ASSUME_ALIGNED(x) __assume_aligned(x,32)
    #endif
  #elif defined(__GNUC__) && !defined(__ibmxl__)
    #if defined(__AVX512F__)
      #define QMC_CLINE 64
      #define QMC_ALIGNAS alignas(64)
      #define ASSUME_ALIGNED(x) (x) = (__typeof__(x)) __builtin_assume_aligned(x,64)
    #else
      #define QMC_CLINE 32
      #define QMC_ALIGNAS alignas(32)
      #define ASSUME_ALIGNED(x) (x) = (__typeof__(x)) __builtin_assume_aligned(x,32)
    #endif
  #else
    #define QMC_CLINE 32
    #define QMC_ALIGNAS alignas(32)
    #define ASSUME_ALIGNED(x)
  #endif

#else //capture C
  #if defined(__AVX512F__)
    #define QMC_CLINE 64
  #else
    #define QMC_CLINE 32
  #endif
  #define QMC_ALIGNAS
  #define ASSUME_ALIGNED(x)
  #ifndef nullptr
  #define nullptr NULL
  #endif
#endif

/* Internal timers */
#cmakedefine ENABLE_TIMERS @ENABLE_TIMERS@

/* Use VTune API */
#cmakedefine USE_VTUNE_API @USE_VTUNE_API@

/* Use VTune Task API with timers */
#cmakedefine USE_VTUNE_TASKS @USE_VTUNE_TASKS@

/* Enable NVTX regions in CUDA code. */
#cmakedefine USE_NVTX_API @USE_NVTX_API@

#endif // QMCPLUSPLUS_CONFIGURATION_H

