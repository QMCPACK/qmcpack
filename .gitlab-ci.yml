# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# Â© Alfredo A. Correa 2020-2022

image: debian:testing

variables:
  OMP_NUM_THREADS: 1

g++:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++ pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - g++ --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build .
    - ctest --output-on-failure
    - make install

#g++-debug:
#  stage: build
#  script:
#    - export CXX="g++"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake .. -DCMAKE_BUILD_TYPE=Debug
#    - cmake --build . --verbose
#    - ctest --output-on-failure
#  needs: ["g++"]

#g++-9:
#  image: debian:stable-backports
#  stage: build
#  script:
#    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - g++-9 --version
#    - mkdir build && cd build
#    - CXX=g++-9 cmake ..
#    - cmake --build .
#    - ctest --output-on-failure
#    - make install
#  needs: ["g++"]

g++-std20:
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++ pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - g++ --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=AggressiveOpt
    - cmake --build . --verbose
    - ctest --output-on-failure
    - make install
  needs: ["g++"]

g++-asan:
  stage: build
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - CXXFLAGS="-g -O1 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer" cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++"]

g++-tsan:
  stage: build
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - CXXFLAGS="-g -O1 -fsanitize=thread            -fno-sanitize-recover=all -fno-omit-frame-pointer" cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++"]

#g++-current-codecov:
#  stage: build
#  script:
#    - export CXX="g++"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev curl gcovr lcov
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - CXXFLAGS="-ftest-coverage -fprofile-arcs --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-lgcov --coverage"
#    - cmake --build . --verbose
#    - ctest --output-on-failure -T Test -T Coverage
#    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
#    - lcov --directory . --capture --output-file coverage.info
#    - lcov --remove coverage.info '/usr/*' --output-file coverage.info
#    - lcov --list coverage.info
#  coverage: /^\s*lines:\s*\d+.\d+\%/
#  artifacts:
#    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
#    expire_in: 2 days
#    reports:
#      cobertura: build/coverage.xml

# TODO(correaa) remove
g++-openblas:
  stage: build
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libopenblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++"]

memcheck:
  stage: build
  script:
    - export CXX="g++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet $CXX valgrind pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake ..
    - cmake --build . --verbose
    - ctest --overwrite MemoryCheckCommandOptions="-q --tool=memcheck --leak-check=yes --num-callers=51 --trace-children=yes --leak-check=full --track-origins=yes --gen-suppressions=all" -T memcheck --output-on-failure
  needs: ["g++"]

clang++:
  stage: build
  script:
    - export CXX="clang++"
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure

#clang++-9:
#  image: debian:stable
#  stage: build
#  script:
#    - export CXX="clang++-9"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake ..
#    - cmake --build . --verbose
#    - ctest --output-on-failure
#  needs: ["clang++"]

#clang++-9-asan:
#  image: debian:stable
#  stage: build
#  image: debian:stable
#  script:
#    - export CXX="clang++-9"
#    - export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-9/bin/llvm-symbolizer
#    - export CXXFLAGS="-fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer"
#    - apt-get update && apt-get install --no-install-recommends -y --quiet clang-9 llvm-9 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev llvm
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - mkdir build && cd build
#    - cmake .. -DCMAKE_BUILD_TYPE=Debug
#    - cmake --build . --verbose
#    - export ASAN_OPTIONS="halt_on_error=1 detect_leaks=1"
#    - ctest --output-on-failure
#  needs: ["clang++"]

clang++-std20:
  stage: build
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet clang pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - clang++ --version
    - mkdir build && cd build
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20
    - cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["clang++"]

clang++-tidy:
  stage: test
  script:
    - export CXX="clang++"
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang clang-tidy pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libblas-dev liblapack-dev libfftw3-dev
    - ln --symbolic --force . ../multi
    - $CXX --version
    - clang-tidy --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_CXX_CLANG_TIDY="clang-tidy"
    - cmake --build . --verbose -- --quiet --no-print-directory
    - ctest --output-on-failure
  needs: ["clang++"]

#g++-cpplint:
#  stage: test
#  script:
#    - export CXX="g++"
#    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++ pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libblas-dev liblapack-dev libfftw3-dev python3-pip
#    - pip install cpplint
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - cpplint --version
#    - mkdir build && cd build
#    - cmake .. -DCMAKE_CXX_CPPLINT="cpplint;--filter=-build/include_order,-legal/copyright,-readability/alt_tokens,-readability/nolint,-runtime/references,-whitespace/braces,-whitespace/comments,-whitespace/line_length,-whitespace/operators,-whitespace/parens,-whitespace/semicolon,-whitespace/tab"
#    - cmake --build . --verbose -- --quiet --no-print-directory
#    - cpplint --filter=-build/include_order,-build/header_guar,-legal/copyright,-readability/nolint,-runtime/references,-whitespace/line_length,-whitespace/parens,-whitespace/tab,-readability/alt_tokens --recursive ../include/multi/array.hpp
#  needs: ["g++"]

#clang++-11-gcc9:
#  stage: build
#  image: vistart/cuda:10.2-ubuntu20.04
#  script:
#    - export CXX="clang++-11"
#    - apt-get update 
#    - DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y --quiet gcc-9 clang-11 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#    - ln --symbolic --force . ../multi
#    - $CXX -v
#    - mkdir build && cd build
#    - cmake ..
#    - cmake --build . --verbose -- --quiet --no-print-directory
#    - ctest --output-on-failure

#cuda-11.0:
#    allow_failure: true
#    image: nvidia/cuda:11.0-devel
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

# image not working
#cuda-11.1:
#    image: nvidia/cuda:11.1.0-devel
#    allow_failure: true
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.2:
#    allow_failure: true
#    image: nvidia/cuda:11.2.0-devel
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.3:
#    allow_failure: true
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - echo 'deb [trusted=yes] https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#      - apt-get update
#      - apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev cuda
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.4:
#    allow_failure: true
#    image: docker pull nvidia/cuda:11.4.2-devel-ubi8
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.5:
#    image: nvidia/cuda:11.5.0-devel
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.6:
#    image: nvidia/cuda:11.6.0-devel
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - ln --symbolic --force . ../multi
#      - nvcc --version
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.5gpuci:
#    allow_failure: true
#    image: gpuci/cuda:11.5.0-devel-ubuntu20.04
#    stage: build
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
#      - nvcc --version
#      - ln --symbolic --force . ../multi
#      - mkdir build && cd build
#      - cmake .. -DENABLE_CUDA=1
#      - cmake --build . --verbose
#      - ctest --output-on-failure

#cuda-11.0-sdkhpc:
#    allow_failure: true
#    stage: build
#    script:
#       - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#       - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#       - apt-get update -y
#       - apt-get install --no-install-recommends -y cmake nvhpc-22-3 wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
#       - cmake --version
#       - apt-cache madison nvhpc
#       - /opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.0/bin/nvcc --version
#       - mkdir build && cd build
#       - cmake .. -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.0/bin/nvcc -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.0 -DCMAKE_CUDA_ARCHITECTURES=61 -DCMAKE_CUDA_FLAGS="-gencode arch=compute_61,code=sm_61"
#       - cmake --build . || make VERBOSE=1
#       - ctest --output-on-failure

#cuda-11.6:
#    allow_failure: false
#    stage: build
#    script:
#       - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#       - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#       - apt-get update -y
#       - apt-get install --no-install-recommends -y cmake nvhpc-22-3 wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
#       - cmake --version
#       - apt-cache madison nvhpc
#       - /opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc --version
#       - mkdir build && cd build
#       - cmake .. -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6 -DCMAKE_CUDA_ARCHITECTURES=61 -DCMAKE_CUDA_FLAGS="-gencode arch=compute_61,code=sm_61"
#       - cmake --build . || make VERBOSE=1
#       - ctest --output-on-failure

cuda-11.8:
  stage: build
  allow_failure: false
  image: debian:stable
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates gnupg software-properties-common
    - apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/3bf863cc.pub
    - add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /"
    - add-apt-repository contrib
    - apt-get update
    - apt-get -y install cuda
    - apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
    - /usr/local/cuda-11.8/bin/nvcc --version
    - mkdir build && cd build
    - cmake .. -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.8/bin/nvcc -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_ARCHITECTURES=61 -DCMAKE_CUDA_FLAGS="-gencode arch=compute_61,code=sm_61"
    - cmake --build . || make VERBOSE=1
    - ctest --output-on-failure
  needs: ["g++"]

cuda-runner:
  stage: test
  tags:
    - intel_compiler
  script:
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc --version
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_ARCHITECTURES=70 -DCMAKE_CUDA_FLAGS="-ccbin=g++-9" -DCMAKE_CXX_STANDARD=17
    - make -j8 -output-sync=recurse
    - ctest --output-on-failure --timeout 600
    - ../build/include/multi/adaptors/thrust/test/speed.cu.x
    - ../build/include/multi/adaptors/thrust/test/speed_algo.cu.x
    - ../build/include/multi/adaptors/fftw/test/combinations.cpp.x

  needs: ["cuda-11.8"]

#g++-cppcheck:
#  stage: build
#  allow_failure: false
#  image: debian:testing
#  script:
#    - export CXX="g++"
#    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet $CXX pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev liblapack-dev libfftw3-dev cppcheck
#    - ln --symbolic --force . ../multi
#    - $CXX --version
#    - cppcheck --version
#    - find . -name '*.hpp' -exec cppcheck --enable=all --inline-suppr --suppress=unmatchedSuppression --suppress=syntaxError --suppress=missingInclude --suppress=missingIncludeSystem --suppress=preprocessorErrorDirective --suppress=syntaxError --suppress=unusedFunction --suppress=arithOperationsOnVoidPointer --suppress=sizeofDereferencedVoidPointer --suppress=sizeofDereferencedVoidPointer --suppress=unmatchedSuppression:{} -D__align__ -DCUDARTAPI --language=c++ --std=c++17 --error-exitcode=666 --verbose --exception-handling {} \;
#    - mkdir build && cd build
#    - cmake -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--inline-suppr;--language=c++;--std=c++17;--check-config;--error-exitcode=666;--verbose;--exception-handling" ..
#    - cmake --build . --verbose || make VERBOSE=1
#    - ctest --output-on-failure
#  needs: ["g++"]

#clang++-iwyu:
#  stage: build
#  allow_failure: true
#  image: debian:testing
#  script:
#    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang cmake iwyu make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev liblapack-dev libfftw3-dev pkg-config
#    - ln --symbolic --force . ../multi
#    - clang++ --version
#    - iwyu --version
#    - find . -name '*.hpp' -exec iwyu -w -Xiwyu --transitive_includes_only -Xiwyu --cxx17ns -Xiwyu --quoted_includes_first -Xiwyu --cxx17ns -std=c++17 {} \;
#  needs: ["clang++"]

#nvhpc-22.1:
#    stage: build
#    script:
#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates curl tree
#      - curl --output nvhpc-22-1_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-22-1_22.1_amd64.deb --retry 5 --retry-delay 5
#      - curl --output nvhpc-2022_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-2022_22.1_amd64.deb --retry 5 --retry-delay 5
#      - apt-get install --no-install-recommends -y --quiet ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - rm -rf ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - apt-get install --no-install-recommends -y --quiet grep cmake libboost-test-dev libboost-serialization-dev libboost-timer-dev make pkg-config libblas-dev liblapack-dev libfftw3-dev
#      - /opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ --version
#      - strings /opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ | grep D
#      - mkdir build && cd build
#      - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ cmake ..
#      - make VERBOSE=1
#      - ctest --output-on-failure

#nvhpc-22.1-std20:
#    stage: build
#    script:
#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates curl tree
#      - curl --output nvhpc-22-1_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-22-1_22.1_amd64.deb --retry 5 --retry-delay 5
#      - curl --output nvhpc-2022_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-2022_22.1_amd64.deb --retry 5 --retry-delay 5
#      - apt-get install --no-install-recommends -y --quiet ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - rm -rf ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - apt-get install --no-install-recommends -y --quiet cmake libboost-test-dev libboost-serialization-dev libboost-timer-dev make pkg-config libblas-dev liblapack-dev libfftw3-dev
#      - mkdir build && cd build
#      - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ cmake .. -DCMAKE_CXX_STANDARD=20
#      - make VERBOSE=1
#      - ctest --output-on-failure

#nvhpc-22.2:
#    stage: build
#    script:
#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#      - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#      - apt-get update -y
#      - apt-get autoremove
#      - apt-get install -y nvhpc-22-2
#      - apt-get install --no-install-recommends -y --quiet ca-certificates curl tree grep cmake libboost-test-dev libboost-serialization-dev libboost-timer-dev make pkg-config libblas-dev liblapack-dev libfftw3-dev
#      - /opt/nvidia/hpc_sdk/Linux_x86_64/22.2/compilers/bin/nvc++ --version
#      - mkdir build && cd build
#      - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.2/compilers/bin/nvc++ cmake ..
#      - make VERBOSE=1
#      - ctest --output-on-failure

#nvhpc-22.3:
#    stage: build
#    script:
#       - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#       - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#       - apt-get update -y
#       - apt-get install --no-install-recommends -y nvhpc-22-3 cmake make libboost-test-dev libboost-serialization-dev
#       - /opt/nvidia/hpc_sdk/Linux_x86_64/22.3/compilers/bin/nvc++ --version
#       - mkdir build && cd build
#       - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/compilers/bin/nvc++ cmake ..
#       - make VERBOSE=1
#       - ctest --output-on-failure

#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates curl tree
#      - curl --output nvhpc-22-1_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-22-1_22.1_amd64.deb --retry 5 --retry-delay 5
#      - curl --output nvhpc-2022_22.1_amd64.deb --url https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-2022_22.1_amd64.deb --retry 5 --retry-delay 5
#      - apt-get install --no-install-recommends -y --quiet ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - rm -rf ./nvhpc-22-1_22.1_amd64.deb ./nvhpc-2022_22.1_amd64.deb
#      - apt-get install --no-install-recommends -y --quiet grep cmake libboost-test-dev libboost-serialization-dev libboost-timer-dev make pkg-config libblas-dev liblapack-dev libfftw3-dev
#      - /opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ --version
#      - strings /opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ | grep D
#      - mkdir build && cd build
#      - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.1/compilers/bin/nvc++ cmake ..
#      - make VERBOSE=1
#      - ctest --output-on-failure

nvhpc-22.7:
  stage: build
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
    - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' |      tee /etc/apt/sources.list.d/nvhpc.list
    - apt-get update -y
    - apt-get install --no-install-recommends -y nvhpc-22-7 cmake make libboost-test-dev libboost-serialization-dev
    - /opt/nvidia/hpc_sdk/Linux_x86_64/22.7/compilers/bin/nvc++ --version
    - mkdir build && cd build
    - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.7/compilers/bin/nvc++ cmake ..
    - make VERBOSE=1
    - ctest --output-on-failure
  needs: ["g++"]

circle-latest:
  allow_failure: false
  image: debian:stable  # circle is incompatible with gcc 12 lib
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang g++ pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev tar gzip wget libelf1 grep
    - mkdir -p build_latest && cd build_latest
    - wget https://www.circle-lang.org/linux/build_latest.tgz --no-verbose
    - tar -zxvf build_latest.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DBOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu/ -DENABLE_CIRCLE=1
    - make VERBOSE=1
    - ctest --output-on-failure
  needs: ["clang++"]

icpc:  # https://github.com/oneapi-src/oneapi-ci/blob/master/.gitlab-ci.yml
  allow_failure: false
  image: debian:stable  # icpc 2022.1.2 is incompatible with gcc 12 lib
  stage: build
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet g++ ca-certificates cmake curl libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - curl --output webimage.sh --url https://registrationcenter-download.intel.com/akdlm/irc_nas/18479/l_HPCKit_p_2022.1.2.117_offline.sh --retry 5 --retry-delay 5
    - chmod +x webimage.sh
    - ./webimage.sh -x -f webimage_extracted --log extract.log
    - rm -rf webimage.sh
    - ls -1 webimage_extracted/
    - WEBIMAGE_NAME=$(ls -1 webimage_extracted/)
    - webimage_extracted/"$WEBIMAGE_NAME"/bootstrapper -s --action install --components=intel.oneapi.lin.dpcpp-cpp-compiler-pro:intel.oneapi.lin.mpi.devel --eula=accept --log-dir=.
    - rm -rf webimage_extracted
    - . /opt/intel/oneapi/setvars.sh
    - ln --symbolic --force . ../multi
    - export CC=icc; export CXX=icpc;
    - $CXX -v
    - mkdir build.icpc && cd build.icpc
    - cmake ..
    - make VERBOSE=1
    - ctest --output-on-failure
  needs: ["g++"]

icpx: # https://github.com/oneapi-src/oneapi-ci/blob/master/.gitlab-ci.yml
  stage: build
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates curl
    - curl --output webimage.sh --url https://registrationcenter-download.intel.com/akdlm/irc_nas/18487/l_BaseKit_p_2022.1.2.146_offline.sh --retry 5 --retry-delay 5
    - chmod +x webimage.sh
    - ./webimage.sh -x -f webimage_extracted --log extract.log
    - rm -rf webimage.sh
    - ls -1 webimage_extracted/
    - WEBIMAGE_NAME=$(ls -1 webimage_extracted/)
    - webimage_extracted/"$WEBIMAGE_NAME"/bootstrapper -s --action install --components=`#intel.oneapi.lin.mkl.devel:`intel.oneapi.lin.dpcpp-cpp-compiler:intel.oneapi.lin.dpl --eula=accept --log-dir=.
    - rm -rf webimage_extracted
    - apt-get update && apt-get install --no-install-recommends -y --quiet g++ cmake libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - . /opt/intel/oneapi/setvars.sh
    - ln --symbolic --force . ../multi
    - export CC=icx; export CXX=icpx;
    - $CXX -v
    - mkdir build.icpx && cd build.icpx
    - cmake .. #cmake --build . -- --quiet --no-print-directory
    - make VERBOSE=1
    - export MKL_VERBOSE=1
    - ctest --output-on-failure
    - cd ..
  needs: ["clang++"]

variables:
  msbuild: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe'
  mscmake: 'C:\Program Files\CMake\bin\cmake.exe'

#build_windows:
#  stage: build
#  script:
#    - choco install --no-progress -y cmake
#    - choco install --no-progress -y boost-msvc-14.2
#    - '& "$msbuild" -help'
#    - '& "$msbuild" -version'
#    - mkdir build
#    - cd build
#    - '& "$mscmake"  --version'
#    - '& "$mscmake"  ..'
#    - '& "$mscmake"  --build . --verbose'
#    - dir
#  tags:
#    - shared-windows
#    - windows
#    - windows-1809

#g++-codecov-runner:
#  stage: test
#  allow_failure: true
#  tags:
#    - intel_compiler
#  script:
#    - g++ --version
#    - mkdir build && cd build
#    - cmake --version
#    - CXX="g++" CXXFLAGS="-fprofile-arcs -ftest-coverage --coverage" cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-fprofile-arcs -ftest-coverage -lgcov --coverage"
#    - cmake --build . -j 12
#    - ctest --output-on-failure -T Test -T Coverage  # - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
#    - lcov --directory . --capture --output-file coverage.info
#    - lcov --remove coverage.info '/usr/*' --output-file coverage.info 
#    - lcov --list coverage.info
#    - bash <(curl -s https://codecov.io/bash) -t 999feb5b-a599-4d02-b9c5-46d977247f3a || echo "Codecov did not collect coverage reports"
#  needs: ["g++"]

#g++ pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev

cobertura:
  stage: build
  script:
    - apt-get update && apt-get -qq install --no-install-recommends -y --quiet cmake g++ gcovr make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - CXXFLAGS="--coverage" cmake ..
    - cmake --build .
    - ctest
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
  needs: ["g++"]

#icpc-nomkl-runner:
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - export CXX="/opt/intel/oneapi/compiler/2021.2.0/linux/bin/intel64/icpc"
#      - $CXX --version
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -j 12
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure

#icpc-runner: # image: intel/oneapi-basekit
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - . /opt/intel/oneapi/setvars.sh
#      - export CXX="icpc"
#      - $CXX --version
#      - mkdir build && cd build
#      - cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
#      - cmake --build . -j 12
#      - export MKL_VERBOSE=1
#      - ctest --output-on-failure

#nvcc-runner:
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - mkdir build && cd build
#      - /usr/local/cuda/bin/nvcc --version
#      - CUDACXX=/usr/local/cuda/bin/nvcc CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda cmake .. -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=Release
#      - cmake --build . -j 12
#      - ctest -j 1 --output-on-failure

#nvcc-cuda-runner:
#    stage: test
#    tags:
#      - intel_compiler
#    script:
#      - mkdir build && cd build
#      - /usr/local/cuda/bin/nvcc --version
#      - CUDACXX=/usr/local/cuda/bin/nvcc CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda cmake .. -DCMAKE_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_ARCHITECTURES=72 -DCMAKE_CUDA_FLAGS="-gencode arch=compute_72,code=sm_72"
#      - cmake --build . -j 12 || make VERBOSE=1
#      - ctest -j 1 --output-on-failure

qmcpack-g++:
  stage: test
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake g++ git gfortran libblas-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev make numdiff pkg-config python3 python3-h5py python3-numpy python3-mpi4py python3-scipy libxml2-dev
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cp -r qmcpack qmcpack.noupdate
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - echo $CI_REPOSITORY_URL
    - echo $CI_COMMIT_BRANCH
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd ../qmcpack.noupdate
    - cd build
    - cd ../../qmcpack
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
  needs: ["g++"]

#qmcpack-clang++:
#  stage: test
#  script:
#    - export DEBIAN_FRONTEND=noninteractive
#    - apt-get -qq update && apt-get -qq install --no-install-recommends -y clang libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran pkg-config cmake make git ca-certificates numdiff python3 python3-numpy python3-h5py python3-mpi4py python3-scipy libxml2-dev libhdf5-dev libomp-dev
#    - git clone https://github.com/QMCPACK/qmcpack.git
#    - cp -r qmcpack qmcpack.noupdate
#    - cd qmcpack
#    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
#    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
#    - echo $CI_REPOSITORY_URL
#    - echo $CI_COMMIT_BRANCH
#    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
#    - cd ../qmcpack.noupdate
#    - cd build
#    - export OMPI_CC=clang
#    - export OMPI_CXX=clang++
#    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
#    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#    - ctest -R ppconvert --output-on-failure
#    - ctest -R afqmc     --output-on-failure
#    - cd ../../qmcpack
#    - cd build
#    - OMPI_CC=clang OMPI_CXX=clang++ cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
#    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#    - ctest -R ppconvert --output-on-failure
#    - ctest -R afqmc     --output-on-failure
#  needs: ["clang++"]

#qmcpack-cuda-11.6-compileonly:
#    allow_failure: true
#    stage: test
#    script:
#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#      - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#      - apt-get update -y
#      - apt-get install --no-install-recommends -y nvhpc-22-3 gfortran g++ git wget  make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev libxml2-dev make numdiff pkg-config python3 python3-h5py python3-mpi4py python3-numpy python3-scipy
#      - g++ --version
#      - /opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc --version
#      - wget https://cmake.org/files/v3.22/cmake-3.22.4-linux-x86_64.sh --no-verbose # following https://askubuntu.com/a/865294/15943
#      - mkdir /opt/cmake
#      - sh cmake-3.22.4-linux-x86_64.sh --skip-license --prefix=/opt/cmake
#      - ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
#      - cmake --version
#      - git clone https://github.com/QMCPACK/qmcpack.git
#      - cd qmcpack
#      - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
#      - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
#      - echo $CI_REPOSITORY_URL
#      - echo $CI_COMMIT_BRANCH
#      - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
#      - cd build
#      - CUDACXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6 ..
#      - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#      - ctest -R ppconvert --output-on-failure

#qmcpack-cuda-11.6-gcc9-compileonly:
#    allow_failure: true
#    image: debian:stable-backports
#    stage: test
#    script:
#      - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#      - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#      - apt-get update -y
#      - apt-get install --no-install-recommends -y nvhpc-22-3 gfortran g++ g++-9 git wget  make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev libxml2-dev make numdiff pkg-config python3 python3-h5py python3-mpi4py python3-numpy python3-scipy
#      - g++-9 --version
#      - /opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc --version
#      - wget https://cmake.org/files/v3.22/cmake-3.22.4-linux-x86_64.sh --no-verbose # following https://askubuntu.com/a/865294/15943
#      - mkdir /opt/cmake
#      - sh cmake-3.22.4-linux-x86_64.sh --skip-license --prefix=/opt/cmake
#      - ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
#      - cmake --version
#      - git clone https://github.com/QMCPACK/qmcpack.git
#      - cd qmcpack
#      - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
#      - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
#      - echo $CI_REPOSITORY_URL
#      - echo $CI_COMMIT_BRANCH
#      - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
#      - cd build
#      - CUDACXX=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6 ..
#      - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#      - ctest -R ppconvert --output-on-failure

#qmcpack-icpc-runner:
#  stage: test
#  tags:
#    - intel_compiler
#  script:
#    - . /opt/intel/oneapi/setvars.sh
#    - export CXX="icpc"
#    - $CXX --version
#    - cmake --version
#    - git clone https://github.com/QMCPACK/qmcpack.git
#    - cd qmcpack
#    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
#    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
#    - echo $CI_REPOSITORY_URL
#    - echo $CI_COMMIT_BRANCH
#    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git master
#    - cd build
#    - cmake -DCMAKE_C_COMPILER=mpiicc -DCMAKE_CXX_COMPILER=mpiicpc -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 ..
#    - make -output-sync=recurse -j 16 ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#    - ctest -R ppconvert --output-on-failure

qmcpack-cuda-runner:
  allow_failure: false
  stage: test
  tags:
    - intel_compiler
  script:
    - cmake --version
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cp -r qmcpack qmcpack.noupdate
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd ../qmcpack.noupdate
    - cd build
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
    - cd ../../qmcpack
    - cd build
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" ..
    - make -j4 ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
  needs: ["qmcpack-g++"]

#qmcpack-cuda-11.8-compileonly:
#  allow_failure: false
#  image: debian:stable
#  stage: test
#  script:
#    - export DEBIAN_FRONTEND=noninteractive
#    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl g++ git gfortran gnupg libblas-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev libxml2-dev make numdiff pkg-config python3 python3-h5py python3-numpy python3-mpi4py python3-scipy software-properties-common
#    - apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/3bf863cc.pub
#    - add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /"
#    - add-apt-repository contrib
#    - apt-get update
#    - apt-get -y install cuda
#    - apt-get install --no-install-recommends -y cmake g++ g++-9 git gfortran make libfftw3-dev libblas-dev libboost-serialization-dev libboost-test-dev libboost-timer-dev libboost-filesystem-dev liblapack-dev libopenmpi-dev pkg-config wget
#    - cmake --version
#    - git clone https://github.com/QMCPACK/qmcpack.git
#    - cp -r qmcpack qmcpack.noupdate
#    - cd qmcpack
#    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
#    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
#    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH # e.g. https://gitlab.com/correaa/boost-multi.git
#    - cd ../qmcpack.noupdate
#    - cd build
#    - CUDACXX=/usr/local/cuda/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" ..
#    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#    - cd ../../qmcpack
#    - cd build
#    - CUDACXX=/usr/local/cuda/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" ..
#    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
#  needs: ["cuda-11.8"]

#inq-clang++-latest:
#  stage: test
#  script:
#    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates clang cmake gfortran git libblas-dev libboost-filesystem-dev libboost-serialization-dev libfftw3-dev liblapack-dev libopenmpi-dev make pkg-config
#    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
#    - cd inq
#    - cd external_libs/multi
#    - git fetch
#    - git checkout $CI_COMMIT_BRANCH
#    - cd ../..
#    - mkdir build && cd build
#    - CXX=clang++ ../configure --prefix=$HOME --disable-debug
#    - make
#    - make install
#    - ctest --output-on-failure
#  needs: ["clang++"]

#cuda-11.6:
#    allow_failure: false
#    stage: build
#    script:
#       - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
#       - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
#       - apt-get update -y
#       - apt-get install --no-install-recommends -y cmake nvhpc-22-3 wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
#       - cmake --version
#       - apt-cache madison nvhpc
#       - /opt/nvidia/hpc_sdk/Linux_x86_64/2022/cuda/bin/nvcc --version
#       - mkdir build && cd build
#       - cmake .. -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6/bin/nvcc -DCUDA_TOOLKIT_ROOT_DIR=/opt/nvidia/hpc_sdk/Linux_x86_64/22.3/cuda/11.6 -DCMAKE_CUDA_ARCHITECTURES=61 -DCMAKE_CUDA_FLAGS="-gencode arch=compute_61,code=sm_61"
#       - cmake --build . || make VERBOSE=1
#       - ctest --output-on-failure


#inq-cuda-11.8-compileonly:
#  allow_failure: false
#  image: debian:stable
#  stage: test
#  script:
#    - export DEBIAN_FRONTEND=noninteractive
#    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates gnupg software-properties-common
#    - apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/3bf863cc.pub
#    - add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /"
#    - add-apt-repository contrib
#    - apt-get update
#    - apt-get -y install cuda
#    - apt-get install --no-install-recommends -y cmake g++ g++-9 git gfortran make libfftw3-dev libblas-dev libboost-serialization-dev libboost-test-dev libboost-timer-dev libboost-filesystem-dev liblapack-dev libopenmpi-dev pkg-config wget
#    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
#    - cd inq
#    - cd external_libs/multi
#    - git fetch
#    - git checkout $CI_COMMIT_BRANCH
#    - cd ../..
#    - mkdir build && cd build
#    - g++ --version
#    - /usr/local/cuda-11.8/bin/nvcc --version
#    - CUDACXX=/usr/local/cuda-11.8/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --with-cuda-prefix=/usr/local/cuda --pass-thru -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.8 -DCMAKE_CUDA_ARCHITECTURES=70
#    - make silicon
#  needs: ["cuda-11.8"]

#inq-cuda-11.4-compileonly:
#    allow_failure: true
#    image: nvidia/cuda:11.4.0-devel
#    stage: test
#    script:
#      - export DEBIAN_FRONTEND=noninteractive
#      - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-filesystem-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config make git ca-certificates wget
#      - wget https://cmake.org/files/v3.21/cmake-3.21.3-linux-x86_64.sh --no-verbose >/dev/null
#      - mkdir /opt/cmake
#      - sh cmake-3.21.3-linux-x86_64.sh --skip-license --prefix=/opt/cmake
#      - ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
#      - cmake --version
#      - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
#      - cd inq
#      - cd external_libs/multi
#      - git fetch
#      - git checkout $CI_COMMIT_BRANCH
#      - cd ../..
#      - mkdir build && cd build
#      - /usr/local/cuda/bin/nvcc -V
#      - CUDACXX=/usr/local/cuda/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --with-cuda-prefix=/usr/local/cuda --pass-thru -DCMAKE_CUDA_ARCHITECTURES=70
#      - make silicon

#inq-g++-latest:
#  stage: test
#  script:
#    - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-filesystem-dev libboost-serialization-dev libopenmpi-dev gfortran g++ pkg-config cmake make git ca-certificates
#    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
#    - cd inq
#    - cd external_libs/multi
#    - git fetch
#    - git checkout $CI_COMMIT_BRANCH
#    - cd ../..
#    - mkdir build && cd build
#    - ../configure --prefix=$HOME --disable-debug
#    - make
#    - make install
#    - ctest --output-on-failure
#  needs: ["g++"]

inq-nvcc-ompi-runner:
  stage: test
  tags:
    - intel_compiler
  script:
    - export PREFIX=`mktemp -d`
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - cd external_libs/multi
    - git checkout $CI_COMMIT_BRANCH
    - cd ../..
    - mkdir build && cd build
    - CUDACXX=/usr/local/cuda/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --disable-debug --pass-thru -DCMAKE_CUDA_ARCHITECTURES=70 `#--with-cuda-prefix=/usr/local/cuda`
    - make -j4 -output-sync=recurse
    - make -j4 install
    - ctest -j2 --output-on-failure --timeout 600
    - cd src; INQ_EXEC_ENV="mpirun --oversubscribe -np 4" ctest --output-on-failure --timeout 600; cd ..
    - rm -rf $PREFIX
  needs: ["cuda-11.8"]
