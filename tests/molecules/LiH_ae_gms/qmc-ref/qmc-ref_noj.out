  Input file(s): qmc-ref_noj.in.xml 

=====================================================
                    QMCPACK 3.4.0 

       (c) Copyright 2003-  QMCPACK developers

                    Please cite:
 J. Kim et al. J. Phys. Cond. Mat. 30 195901 (2018)
      https://doi.org/10.1088/1361-648X/aab9c3

  Git branch: HEAD
  Last git commit: ea23ca60d73178e72bd4639677282e070a3be112
  Last git commit date: Tue Jun 26 14:08:17 2018 -0500
  Last git commit subject: New Converged Pyscf references for FeCO6
=====================================================
  Global options 

  MPI Nodes            = 256
  MPI Nodes per group  = 256
  MPI Group ID         = 0
  OMP_NUM_THREADS      = 64

  Precision used in this calculation, see definitions in the manual:
  Base precision      = double
  Full precision      = double

  Input XML = qmc-ref_noj.in.xml

  Project = qmc-ref_noj
  date    = 2018-07-05 16:57:47 UTC
  host    = Q02-I0-J01.vesta.itd

 Random Number
 -------------
  Offset for the random number seeds based on time: 523

  Range of prime numbers to use as seeds over processors and threads = 3769-186871


 Lattice
 -------
  Lattice is not specified for the Open BC. Add a huge box.
  Simulation cell radius   = 50000.000000 bohr
  Wigner-Seitz cell radius = 50000.000000 bohr

 Particle Set 
 ------------
  Name: e
  Initializing the lattice by the global supercell
  All the species have the same mass 1.000000
  Particle set size: 4

 Particle Set 
 ------------
  Name: ion0
  Initializing the lattice by the global supercell
  Distinctive masses for each species 
  Particle set size: 2

 Wavefunction setup: 
 ------------------- 
  Name: psi0
  Created SPOSet builder named 'LCAOBSet' of type molecularorbital
  LCAO: SoaAtomicBasisSet<MultiQuintic,0>

  Distance table for similar particles (A-A):
    source/target: e
    Using structure-of-arrays (SoA) data layout
    Distance computations use open boundary conditions in 3D.


  Distance table for dissimilar particles (A-B):
    source: ion0  target: e
    Using structure-of-arrays (SoA) data layout
    Distance computations use open boundary conditions in 3D.

  AO BasisSet for Li
   Angular momentum expanded in cartesian functions x^lx y^ly z^lz according to Gamess
Using log grid with default values: ri = 0.000001 rf = 100.000000 npts = 1001
   R(n,l,m,s) 0 0 0 0
   R(n,l,m,s) 1 0 0 0
   R(n,l,m,s) 2 0 0 0
   R(n,l,m,s) 3 0 0 0
   R(n,l,m,s) 4 0 0 0
   R(n,l,m,s) 5 0 0 0
   R(n,l,m,s) 6 1 0 0
   R(n,l,m,s) 7 1 0 0
   R(n,l,m,s) 8 1 0 0
   R(n,l,m,s) 9 1 0 0
   R(n,l,m,s) 10 1 0 0
   R(n,l,m,s) 11 2 0 0
   R(n,l,m,s) 12 2 0 0
   R(n,l,m,s) 13 2 0 0
   R(n,l,m,s) 14 2 0 0
   R(n,l,m,s) 15 3 0 0
   R(n,l,m,s) 16 3 0 0
   R(n,l,m,s) 17 3 0 0
   R(n,l,m,s) 18 4 0 0
   R(n,l,m,s) 19 4 0 0
Expanding Ylm (angular function) according to Gamess using cartesian gaussians
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 6 cartesian gaussian orbitals for l= 2
Adding 6 cartesian gaussian orbitals for l= 2
Adding 6 cartesian gaussian orbitals for l= 2
Adding 6 cartesian gaussian orbitals for l= 2
Adding 10 cartesian gaussian orbitals for l= 3
Adding 10 cartesian gaussian orbitals for l= 3
Adding 10 cartesian gaussian orbitals for l= 3
Adding 15 cartesian gaussian orbitals for l= 4
Adding 15 cartesian gaussian orbitals for l= 4
   Maximum Angular Momentum  = 4
   Number of Radial functors = 20
   Basis size                = 105

  AO BasisSet for H
   Angular momentum expanded in cartesian functions x^lx y^ly z^lz according to Gamess
Using log grid with default values: ri = 0.000001 rf = 100.000000 npts = 1001
   R(n,l,m,s) 0 0 0 0
   R(n,l,m,s) 1 0 0 0
   R(n,l,m,s) 2 0 0 0
   R(n,l,m,s) 3 0 0 0
   R(n,l,m,s) 4 0 0 0
   R(n,l,m,s) 5 1 0 0
   R(n,l,m,s) 6 1 0 0
   R(n,l,m,s) 7 1 0 0
   R(n,l,m,s) 8 1 0 0
   R(n,l,m,s) 9 2 0 0
   R(n,l,m,s) 10 2 0 0
   R(n,l,m,s) 11 2 0 0
   R(n,l,m,s) 12 3 0 0
   R(n,l,m,s) 13 3 0 0
   R(n,l,m,s) 14 4 0 0
Expanding Ylm (angular function) according to Gamess using cartesian gaussians
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 1 cartesian gaussian orbitals for l= 0
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 3 cartesian gaussian orbitals for l= 1
Adding 6 cartesian gaussian orbitals for l= 2
Adding 6 cartesian gaussian orbitals for l= 2
Adding 6 cartesian gaussian orbitals for l= 2
Adding 10 cartesian gaussian orbitals for l= 3
Adding 10 cartesian gaussian orbitals for l= 3
Adding 15 cartesian gaussian orbitals for l= 4
   Maximum Angular Momentum  = 4
   Number of Radial functors = 15
   Basis size                = 70

Reuse SPOSetBuilder "LCAOBSet" type MolecularOrbital
  Building SPOSet '' with '' basis set.
Reuse SPOSetBuilder "LCAOBSet" type MolecularOrbital
  Building SPOSet '' with '' basis set.
  Creating a determinant updet group=0 sposet=updet
  Reusing a SPO set updet
Using DiracDeterminantBase 

  Creating a determinant downdet group=1 sposet=downdet
  Reusing a SPO set downdet
Using DiracDeterminantBase 

  FermionWF = SlaterDet
  QMCHamiltonian::addOperator Kinetic to H, physical Hamiltonian 
  QMCHamiltonian::addOperator ElecElec to H, physical Hamiltonian 
QMCHamiltonian::addOperatorType added type coulomb named ElecElec

  Distance table for similar particles (A-A):
    source/target: ion0
    Using structure-of-arrays (SoA) data layout
    Distance computations use open boundary conditions in 3D.

  QMCHamiltonian::addOperator IonIon to H, physical Hamiltonian 
QMCHamiltonian::addOperatorType added type coulomb named IonIon
  QMCHamiltonian::addOperator ElecIon to H, physical Hamiltonian 
QMCHamiltonian::addOperatorType added type coulomb named ElecIon
  QMCHamiltonian::addOperator Flux to auxH 
QMCHamiltonian::addOperatorType added type flux named Flux

  QMCHamiltonian::add2WalkerProperty added
    5 to P::PropertyList 
    0 to P::Collectables 
    starting Index of the observables in P::PropertyList = 9
ParticleSetPool::randomize 
<init source="ion0" target="e">
</init>
  Initialization Execution time = 0.6746 secs
=========================================================
 Summary of QMC systems 
=========================================================
ParticleSetPool has: 

  ParticleSet e : 0 2 4 

    4

    u -2.7687376971e-01  9.7192569342e-01  6.5734285202e-01
    u -4.2074838182e-03  1.1007900740e+00 -4.9157072018e-01
    d  3.8401554715e-01  2.9005521770e-01 -1.1053498510e+00
    d -7.9809711880e-01 -6.9879681911e-01  3.5867437781e+00

  ParticleSet ion0 : 0 1 2 

    2

    Li  0.0000000000e+00  0.0000000000e+00  0.0000000000e+00
    H  0.0000000000e+00  0.0000000000e+00  3.0139242100e+00

  Hamiltonian h0
  Kinetic         Kinetic energy
  ElecElec        CoulombAA source/target e

  IonIon          CoulombAA source/target ion0

  ElecIon         CoulombAB source=ion0


=========================================================
  Start VMCSingleOMP
  File Root qmc-ref_noj.s000 append = no 
=========================================================
  Adding 64 walkers to 0 existing sets
  Total number of walkers: 1.6384000000e+04
  Total weight: 1.6384000000e+04
  Resetting Properties of the walkers 1 x 14

<vmc function="put">
  qmc_counter=0  my_counter=0
  time step      = 1.0000000000e-01
  blocks         = 200
  steps          = 30000
  substeps       = 3
  current        = 0
  target samples = 1.6000000000e+05
  walkers/mpi    = 64

  stepsbetweensamples = -2931
<parameter name="blocks" condition="int">200</parameter>
<parameter name="blocks_between_recompute" condition="int">0</parameter>
<parameter name="check_properties" condition="int">100</parameter>
<parameter name="checkproperties" condition="int">100</parameter>
<parameter name="current" condition="int">0</parameter>
<parameter name="dmcwalkersperthread" condition="real">1.0000000000e+01</parameter>
<parameter name="maxcpusecs" condition="real">3.6000000000e+05</parameter>
<parameter name="record_configs" condition="int">0</parameter>
<parameter name="record_walkers" condition="int">-2931</parameter>
<parameter name="recordconfigs" condition="int">0</parameter>
<parameter name="recordwalkers" condition="int">-2931</parameter>
<parameter name="rewind" condition="int">0</parameter>
<parameter name="samples" condition="real">1.6000000000e+05</parameter>
<parameter name="samplesperthread" condition="real">1.0000000000e+01</parameter>
<parameter name="steps" condition="int">30000</parameter>
<parameter name="stepsbetweensamples" condition="int">-2931</parameter>
<parameter name="store_configs" condition="int">0</parameter>
<parameter name="storeconfigs" condition="int">0</parameter>
<parameter name="sub_steps" condition="int">3</parameter>
<parameter name="substeps" condition="int">3</parameter>
<parameter name="tau" condition="au">1.0000000000e-01</parameter>
<parameter name="time_step" condition="au">1.0000000000e-01</parameter>
<parameter name="timestep" condition="au">1.0000000000e-01</parameter>
<parameter name="use_drift" condition="string">yes</parameter>
<parameter name="usedrift" condition="string">yes</parameter>
<parameter name="walkers" condition="int">64</parameter>
<parameter name="warmup_steps" condition="int">50</parameter>
<parameter name="warmupsteps" condition="int">50</parameter>
  DumpConfig==false Nothing (configurations, state) will be saved.
</vmc>
  Adding a default LocalEnergyEstimator for the MainEstimator 
  CloneManager::makeClones makes 64 clones for W/Psi/H.
  Cloning methods for both Psi and H are used
===== Memory Usage before cloning =====
Allocated heap: 18.10 MB, avail. heap: 16237.88 MB
Allocated stack: 0.02 MB, avail. stack: 16237.88 MB
==================================================
===== Memory Usage after cloning =====
Allocated heap: 1032.00 MB, avail. heap: 15223.98 MB
Allocated stack: 0.02 MB, avail. stack: 15223.98 MB
==================================================
  Initial partition of walkers 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 

  Using Particle by Particle moves
  Walker moves with drift
  Total Sample Size   =163840
  Walker distribution on root = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 
===== Memory Usage after the buffer registration =====
Allocated heap: 1032.00 MB, avail. heap: 15223.98 MB
Allocated stack: 0.02 MB, avail. stack: 15223.98 MB
==================================================
  Anonymous Buffer size per walker : 768 Bytes.
MEMORY increase 0 MB VMCSingleOMP::resetRun
